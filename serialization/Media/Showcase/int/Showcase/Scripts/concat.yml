---
ID: "671326f6-a42b-4c7c-8988-8b804c8390e8"
Parent: "f96e1925-a3cc-4752-b969-70feb5b5d696"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: /sitecore/media library/Project/Showcase/int/Showcase/Scripts/concat
DB: master
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/671326F6A42B4C7C89888B804C8390E8.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "a5cc358e-60f9-4b1f-8c77-5be646d87847"
  Value: XA.component.accordions = (function ($) {
    var pub = {};

    function pageEditor() {
        if ($('body').hasClass('on-page-editor')) {
            Sitecore.PageModes.ChromeManager.resetChromes(); //page editor lines fix
        }
    }

    var toogleEvents = {
        focus: function () {
            $(this).addClass("show");
        },
        blur: function () {
            $(this).removeClass("show");
        }
    };

    function headerBackground(header) {
        var backgroundIcon = $(header),
            background = $(header).find('img'),
            backgroundSrc = background.attr('src');

        if (backgroundSrc) {
            backgroundIcon.parents('.accordion').addClass('accordion-image');

            backgroundIcon.css({
                'background': 'url(' + backgroundSrc + ')',
                'background-repeat': 'no-repeat',
                'background-size': 'cover',
                'background-position': '50% 100%'
            });

            background.hide();
        }
    }

    function calcSlideSize(acc) {
        var accordionWidth = $(acc).width(),
            accordionItems = $(acc).find('.item'),
            maxHeight = 0;

        _.each(accordionItems, function (item) {
            var itemContent = $(item).find('.toggle-content'),
                itemHeader = $(item).find('.toggle-header'),
                slideWidth = accordionWidth - (accordionItems.length * itemHeader.outerWidth());

            if ($(item).hasClass('active')) {
                $(item).css({
                    'width': slideWidth
                });
            }

            //width
            itemContent.css({
                'width': ($(acc).hasClass('accordion-image')) ? slideWidth + itemHeader.outerWidth() : slideWidth - itemHeader.outerWidth() - parseInt(itemHeader.css('padding'))
            });

            //height
            if ($(item).find('.toggle-content').height() > maxHeight) {
                maxHeight = $(item).find('.toggle-content').height();
            }
        });
    }

    function animateHorizontal(properties) {
        var accordion = $(this).parents('.accordion'),
            panel = $(this).parent(),
            header = panel.find('.toggle-header'),
            content = panel.find('.toggle-content'),
            siblings = panel.siblings(),
            siblingsContent = siblings.find('.toggle-content');

        siblings.stop(true).animate({
            "width": 0
        }, properties.speed, properties.easing, function () {
            siblingsContent.css({
                "display": "none"
            });
        });

        if (panel.hasClass('active')) {

            var slideWidth = accordion.hasClass('accordion-image') ? content.outerWidth() : content.outerWidth() - panel.outerWidth(),
                contentWidth = accordion.hasClass('accordion-image') ? slideWidth : slideWidth - header.outerWidth();

            panel.stop(true).animate({
                "width": slideWidth
            }, properties.speed, properties.easing, function() {

            });


            content.css({
                "width" : contentWidth,
                "display": "block"
            });

        } else {

            panel.stop(true).animate({
                "width": 0
            }, properties.speed, properties.easing, function () {
                content.css({
                    "display": "none"
                });
            });
        }
    }

    function accordion(acc, properties) {
        var ev = 'click',
            $body = $('body'),
            toggleHeader = acc.find('.toggle-header');

        if (properties.expandOnHover) {
            if(!$body.hasClass('on-page-editor')) {
                ev = 'mouseenter';
            } else {
                ev = 'click';
            }

        }

        toggleHeader.on("mouseover", toogleEvents.focus);
        toggleHeader.on("mouseleave", toogleEvents.blur);
        toggleHeader.on("focus", toogleEvents.focus);
        toggleHeader.on("blur", toogleEvents.blur);
        toggleHeader.on("keyup", function (e) {
            if (e.keyCode == 13) {
                $(this).click();
            }
        });


        if (acc.hasClass('accordion-horizontal')) {
            //calc slide width
            window.addEventListener('load', function() {
                calcSlideSize(acc);
            });

            _.each(toggleHeader, function(header) {
                headerBackground(header);
            });

        }


        toggleHeader.on(ev, function (e) {
            var accordion = $(this).parents('.accordion'),
                panel = $(this).parent(),
                $body = $('body'),
                content = panel.find('.toggle-content'),
                siblings = panel.siblings(),
                siblingsContent = siblings.find('.toggle-content'),
                timeoutId;

            var callback = function () {
                pageEditor();
            };

            if (!properties.expandOnHover) {
                if (properties.canOpenMultiple) {
                    panel.toggleClass('active');
                    content.stop().slideToggle({
                            duration: properties.speed,
                            easing: properties.easing
                        },
                        callback);
                } else {
                    if (properties.canToggle) {


                        siblings.removeClass('active');

                        panel.toggleClass('active');

                        if (accordion.hasClass("accordion-horizontal")) {
                            //animation for horizontal accordion
                            animateHorizontal.call(this, properties);

                        } else {
                            siblingsContent.stop().slideUp({
                                    duration: properties.speed,
                                    easing: properties.easing
                                },
                                callback);

                            content.stop().slideToggle({
                                    duration: properties.speed,
                                    easing: properties.easing
                                },
                                callback);
                        }


                    } else {
                        siblings.removeClass('active');
                        siblingsContent.slideUp({
                                duration: properties.speed,
                                easing: properties.easing
                            },
                            callback);

                        panel.addClass('active');
                        content.slideDown({
                                duration: properties.speed,
                                easing: properties.easing
                            },
                            callback);
                    }

                }
            } else {
                if (properties.canToggle) {
                    panel.unbind('mouseleave');

                    if (!$body.hasClass('on-page-editor')) {
                        panel.on('mouseleave', function (event) {
                            timeoutId = setTimeout(function () {
                                panel.removeClass('active');
                                content.stop().slideUp({
                                        duration: properties.speed,
                                        easing: properties.easing
                                    },
                                    callback);

                            }, 300);

                        });
                    } else {
                        $body.on('click', function (event) {
                            timeoutId = setTimeout(function () {
                                panel.removeClass('active');
                                content.stop().slideUp({
                                        duration: properties.speed,
                                        easing: properties.easing
                                    },
                                    callback);

                            }, 300);

                        });
                    }



                    content.unbind('mouseenter');
                    content.on('mouseenter', function (event) {
                        clearTimeout(timeoutId);
                    });
                }

                siblings.removeClass('active');
                siblingsContent.stop().slideUp({
                        duration: properties.speed,
                        easing: properties.easing
                    },
                    callback);

                panel.addClass('active');
                content.slideDown({
                        duration: properties.speed,
                        easing: properties.easing
                    },
                    callback);
            }
        });
    }

    pub.init = function (selector, properties) {
        var accordions = $('.accordion:not(.initialized), .toggle:not(.initialized)');

        accordions.each(function () {
            var properties = $(this).data('properties'),
                acc = $(this);

            if ($(this).hasClass('toggle')) {
                $.extend(properties, {
                    'canToggle': true,
                });
            }

            acc.find('.toggle-content').hide();
            if (properties.expandedByDefault) {
                acc.find('li:first-child').addClass('active');
                acc.find('li:first-child').find('.toggle-content').show();
            }

            accordion(acc, properties);
            acc.addClass('initialized');
        });
    };

    return pub;

}(jQuery));

XA.register('accordions', XA.component.accordions);
XA.component.archive = (function ($, _) {
	var api = {};
	
	var toggleClick = function(args){
		var groupHeader = $(args.target);
		groupHeader.siblings("ul").toggle();
	};
	
	api.init = function(){
		var archives = $(".zen-archive:not(.initialized)"),
			toggles,
			archive;
			
		for(var i=0,l=archives.length;i<l;i++){
			archive = $(archives[i]);
			toggles = archive.find(".group-header");
			toggles.on("click",toggleClick);
			archive.addClass("initialized");	
		}
	};
	
	return api;
})(jQuery, _);

XA.register("archive", XA.component.archive);
XA.component.breadcrumb = (function ($, document) {
	var api = {};

	function BreadcrumbManager(elem) {
		this.breadcrumb = elem;
		this.hideHistory = [];
		this.hideHistory.elems = [];
		this.hideHistory.widths = [];
	}

	BreadcrumbManager.prototype.getElements = function ($list) {
		var elements = [];

		$list.find('li').each(function () {
			elements.push(this);
		});

		return elements;
	};

	BreadcrumbManager.prototype.calculateListElementsWidth = function ($list) {
		var widthSum = 0;

		$list.find('li').each(function () {
			widthSum += $(this).width();
		});

		return widthSum;
	};

	BreadcrumbManager.prototype.calculateWidth = function () {
		var inst = this,
			$list = $(inst.breadcrumb).find('ol'),
			listWidth = $list.width(),
			widthSum = this.calculateListElementsWidth($list),
			elements = this.getElements($list),
			$elementToHide,
			removeIndx = 0;

		var width = inst.hideHistory.widths[inst.hideHistory.widths.length - 1];
		if (listWidth > (widthSum + width)) {
			var elem = inst.hideHistory.elemns.pop();
			inst.hideHistory.widths.pop();
			$(elem).removeClass('hide');
		}


		while ((listWidth < widthSum) && (elements.length > 2)) {
			removeIndx = Math.round(elements.length / 2) - 1;
			$elementToHide = $(elements[removeIndx]);

			inst.hideHistory.elems.push(elements[removeIndx]);
			inst.hideHistory.widths.push($elementToHide.width());
			$elementToHide.addClass('hide');

			widthSum = inst.calculateListElementsWidth($list);
			elements.splice(removeIndx, 1);
		}
	};

    BreadcrumbManager.prototype.init = function () {
		var inst = this,
			taskId = null;

		inst.calculateWidth();
		$(window).resize(function () {
			inst.calculateWidth();
		});
	};

    BreadcrumbManager.prototype.makeNavigation = function () {
        var breadcrumb = $(this.breadcrumb),
            children = breadcrumb.find('li > ol');

        if (children.length > 0) {
            breadcrumb.addClass('breadcrumb-navigation');
        }
    };


	api.init = function () {
        var breadcrumb = $('.breadcrumb:not(.initialized)');

        breadcrumb.each(function () {
            var breadcrumb = new BreadcrumbManager(this);

            if ($(this).hasClass('breadcrumb-hide')) {
                breadcrumb.init();
            } else {
                breadcrumb.makeNavigation();
            }

			$(this).addClass('initialized');
		});
	};

	return api;

})(jQuery, document);

XA.register('breadcrumb', XA.component.breadcrumb);
/**
 * Cognifide
 *
 * XA.component.carousels module.
 *
 * Exposes register(selector, options) method, which initializes Carousel
 * for each elements that match the provided selector, with given options.
 * Element used as a carousel must contain a <ul class="slides"> tag.
 * That tag have to be filled with <li> elements. Each <li> element will be considered as a slide.
 * For more details read the documentation of a register(selector, options) method.
 *
 * @requires jQuery JavaScript Library v1.4.4 or higher
 */
XA.component.carousels = (function($) {
    var pub = {},
        NavigationBuilder = null,
        SliderInitializer = null;

    /**
     * Timer class saves time stamp and counts time difference between
     * current time (update() method) and saved time stamp.
     * @constructor
     */
    function Timer() {
        /**
         * Time difference between last update() call and last set() call
         *
         * @member Timer
         */
        this.elapsed = 0;
        /**
         * Time stamp
         *
         * @member Timer
         */
        this.stamp = null;
    }

    /**
     *  Counts time difference between current time and saved time stamp
     *
     * @member Timer
     */
    Timer.prototype.update = function() {
        if (this.stamp !== null) {
            this.elapsed += this.newStamp() - this.stamp;
        }
    };

    /**
     *  Saves new time stamp
     *
     * @member Timer
     */
    Timer.prototype.set = function() {
        this.stamp = this.newStamp();
    };

    /**
     *  Counts time difference between current time and saved time stamp
     *
     * @member Timer
     * @return stamp of a current time
     * @type Number
     */
    Timer.prototype.newStamp = function() {
        return new Date().valueOf();
    };

    /**
     *  Resets elapsed time.
     *
     * @member Timer
     */
    Timer.prototype.reset = function() {
        this.elapsed = 0;
    };
    /**
     * End of Timer class
     */

    /**
     * TimeIndicator class extends Timer class
     * @constructor
     * @param {Object} $     a jQuery object
     * @param {XA.component.carousels.IndicatorViews.View} view  a time indicator view.
     * @param {Number} timeout   a view timeout
     * @base Timer
     */
    function TimeIndicator($, view, timeout) {
        /**
         * A time indicator view.
         *
         * @member TimerIndicator
         */
        this.view = view;

        this.view.init(timeout);
    }
    TimeIndicator.prototype = new Timer();
    TimeIndicator.constructor = Timer;

    /**
     * Plays the attached view.
     *
     * @member TimerIndicator
     */
    TimeIndicator.prototype.play = function() {
        this.view.play();
    };

    /**
     * Pauses the attached view.
     *
     * @member TimerIndicator
     */
    TimeIndicator.prototype.pause = function() {
        this.view.pause();
    };

    /**
     * Resets elapsed time and resets the attached view.
     *
     * @member TimerIndicator
     */
    TimeIndicator.prototype.reset = function() {
        Timer.prototype.reset.call(this);
        this.view.reset();
    };

    /**
     * Counts time difference between current time and saved time stamp.
     * and updates the attached view
     *
     * @member TimerIndicator
     */
    TimeIndicator.prototype.update = function() {
        Timer.prototype.update.call(this);
        this.view.update(this.elapsed);
    };
    /**
     * end of TimeIndicator class
     */

    /**
     * NavigationBuilder object creates navigation items
     */
    NavigationBuilder = (function($) {

        return {
            createItem : function(settings) {
                var text = settings.text,
                    $navItem = null;

                settings.text = '';
                settings.href = '#';

                $navItem = $('<a>', settings);
                $('<span>', {
                    'text': text
                }).appendTo($navItem);

                return $navItem;
            },
            /**
             * Returns the element(s) that match(es) the provided selector or null
             *
             * @param {String} selector a selector used for searching
             * @return a jQuery object containing element(s) that match(es) the provided selector or null if no element match
             * @type Object
             */
            getElement: function(selector, wrapper) {
                var $element = $(wrapper).find(".nav-items");

                if ($element.length === 0) {
                    $element = null;
                }

                return $element;
            },
            /**
             * Creates navigation items and appends them to $container.
             *
             * @param {Object} $container   navigation items container (jQuery object)
             * @param {String} label   navigation items label template
             * @param {Number} count    number of navigation items to create
             */
            createItems: function($container, label, count) {
                var i,
                    pattern = /#\{index\}/g,
                    settings;

                for (i = 0; i < count; i++) {
                    settings = {
                        'text': label.replace(pattern, i + 1)
                    };
                    settings.text = '';
                    settings.href = '#';


                    this.createItem(settings).appendTo($container);
                }
            },
            /**
             * Creates or selects 'previous'/'next' navigation item.
             * Mode of action depends on settings object:
             * var settings = {
             *     isContainer: Boolean value,
             *     label: String value,
             *     selector: String value,
             *     method: String value
             * };
             *
             * If settings.selector === null or if settings.selector !== null and settings.isContainer == true
             * navigation item is created and attached to $element.first() (using settings.method).
             * If settings.selector !== null and settings.isContainer == false
             * $element.first() is selected as navigation item
             *
             * @param {Object} settings settings of navigation item
             * @param {Object} itemSettings   html attributes of navigation item
             * @param {Object} $element    navigation items container (jQuery object)
             * @return The 'prev'/'next' navigation item
             * @type Object
             */
            createPrevNextItem: function(settings, itemSettings, $element) {
                var $item = null,
                    isSelectorExists = settings.selector !== null;


                if (isSelectorExists) {
                    $element = this.getElement(settings.selector);
                }

                if ($element !== null) {
                    if (settings.isContainer || !isSelectorExists) {
                        $item = this.createItem($.extend({}, {
                            'text': settings.label
                        }, itemSettings));
                        ($element.first())[settings.method]($item);
                    } else {
                        $item = $element.first();
                    }
                }

                return $item;
            }
        };
    }($));
    /**
     * end of NavigationBuilder object
     */

    /**
     * Navigation class holds navigation items.
     * @constructor
     */
    function Navigation($, $wrapper, options) {
        var defaults = {
                'isEnabled': true,
                'hasPrevNextItems': true,
                'item': {
                    'label': '#{index}',
                    'selector': null
                },
                'prevItem': {
                    'label': '<',
                    'selector': null,
                    'isContainer': false
                },
                'nextItem': {
                    'label': '>',
                    'selector': null,
                    'isContainer': false
                },
                'slidesCount': 0
            },
            settings = $.extend(true, {}, defaults, options),
            $container;

        /**
         * jQuery object
         *
         * @member Navigation
         */
        this.$ = $;
        /**
         * Navigation items (one for each slide if navigation is enabled).
         *
         * @member Navigation
         */
        this.$items = $();
        /**
         * Navigation 'next' item (if prev/next items are enabled).
         *
         * @member Navigation
         */
        this.$nextItem = $();
        /**
         * Navigation 'previous' item (if prev/next items are enabled).
         *
         * @member Navigation
         */
        this.$prevItem = $();
        /**
         * Selected item (one from this.$items or null).
         *
         * @member Navigation
         */
        this.$selectedItem = null;

        //initialization
        if (settings.isEnabled) {
            $container = this.prepareItems(settings.item, settings.slidesCount, $wrapper);
            if (settings.hasPrevNextItems) {
                this.preparePrevNextItems(settings, $container);
            }

            $wrapper.find('.nav').trigger('navigation-created', this);
        }
    }

    /**
     * CSS classm which will be used for mark selected item
     *
     * @member Navigation
     */
    Navigation.prototype.selectedItemClass = 'active';

    /**
     * Mark navigation item with given index as selected.
     *
     * @member Navigation
     * @param {Number} index     index of navigation item
     */
    Navigation.prototype.selectItem = function(index) {
        if (this.$selectedItem !== null) {
            this.$selectedItem.removeClass(this.selectedItemClass);
        }

        this.$selectedItem = this.$items.eq(index).addClass(this.selectedItemClass);
    };

    /**
     * Creates or selects navigation items container and fills it with navigation items.
     * If navigation items container is not empty, child elements are adopted as navigation items.
     * Mode of action depends on settings object:
     * var settings = {
     *     'label': '#{index}',
     *     'selector': null
     * };
     * If settings.selector === null navigation item container is created.
     * If settings.selector !== null element that match settings.selector is adapted as navigagation items container.
     *
     * @member Navigation
     * @param {Object} settings settings of navigation items
     * @param {Number} count   number of navigation items
     * @param {Object} $wrapper    wrapper of navigation items container (jQuery object)
     * @return The container filled with navigation items.
     * @type Object
     */
    Navigation.prototype.prepareItems = function(settings, count, $wrapper) {
        var $container = null;

        if (settings.selector !== null) {
            $container = NavigationBuilder.getElement(settings.selector, $wrapper);
        } else {
            $container = $('<div/>', {
                'class': 'nav'
            });
            $container.appendTo($wrapper);
        }

        if ($container !== null) {
            if ($container.children().length === 0) {
                NavigationBuilder.createItems($container, settings.label, count);
            }
            this.$items = $container.children().slice(0, count);
        }

        return $container;
    };

    /**
     * Creates or selects navigation 'previous' and 'next' navigation items (@see NavigationBuilder.createPrevNextItem()).
     * If navigation items container is not empty, child elements are adopted as navigation items.
     *
     * @member Navigation
     * @param {Object} settings settings of navigation
     * @param {Object} $container    navigation items container (jQuery object)
     */
    Navigation.prototype.preparePrevNextItems = function(settings, $container) {
        var $item;

        settings.prevItem.method = 'prepend';
        $item = NavigationBuilder.createPrevNextItem(settings.prevItem, {
            'class': 'prev'
        }, $container);
        this.$prevItem = ($item === null) ? this.$prevItem : $item;

        settings.nextItem.method = 'append';
        $item = NavigationBuilder.createPrevNextItem(settings.nextItem, {
            'class': 'next'
        }, $container);
        this.$nextItem = ($item === null) ? this.$nextItem : $item;
    };
    /**
     * end of Navigation class
     */

    /**
     * SliderContext class is binded to a Slider class instance
     * and holds its properties.
     * @constructor
     */
    function SliderContext() {
        /**
         * Flag, which determines if slide can or can not be changed (for user request)
         *
         * @member SliderContext
         */
        this.canChangeSlide = true;
        /**
         * Default Slider setting object (@see Slider)
         *
         * @member SliderContext
         */
        this.defaults = null;
        /**
         * Navigation object (@see Navigation)
         *
         * @member SliderContext
         */
        this.navigation = null;
        /**
         * Slider object, which this context is attacehd to.
         *
         * @member SliderContext
         */
        this.owner = null;
        /**
         * Flag, which determines if change of a slide can or can not be scheduled
         *
         * @member SliderContext
         */
        this.preventScheduling = false;
        /**
         * Slider setting object
         *
         * @member SliderContext
         */
        this.settings = null;
        /**
         * Instance of Timer class (@see Timer), which is used to store how much
         * time is left to change the slide
         *
         * @member SliderContext
         */
        this.slideTimer = new Timer();
        /**
         * Instance of TimeIndicator class (@see TimeIndicator)
         *
         * @member SliderContext
         */
        this.timeIndicator = null;
        /**
         * Timers array.
         *
         * @member SliderContext
         */
        this.timers = [];
        /**
         * Last timeout identifier.
         *
         * @member SliderContext
         */
        this.timeoutId = null;
        /**
         * Transition (@see XA.component.carousels.Transitions.Transition) used while changing slides
         *
         * @member SliderContext
         */
        this.transition = null;
        /**
         * Transition settings object (@see XA.component.carousels.Transitions.TransitionSettings)
         *
         * @member SliderContext
         */
        this.transitionSettings = new XA.component.carousels.Transitions.TransitionSettings();
        /**
         * jQuery object which contains all slides
         *
         * @member SliderContext
         */
        this.$slides = null;
        /**
         * jQuery object containing element that wrapps slides
         *
         * @member SliderContext
         */
        this.$wrapper = null;
        /**
         * Reference to method, which should change current slide
         *
         * @member SliderContext
         */
        this.changeCurrentSlide = null;
        /**
         * Reference to method, which should return jQuery object with current slide
         *
         * @member SliderContext
         */
        this.getCurrentSlide = null;

        this.timers.push(this.slideTimer);
    }
    /**
     * end of SliderContext class
     */

    /**
     * Slider class manages changing of slides.
     *
     * Options object:
     * {
     *     'navigation': Object value, //navigation settings object
     *     'timeout': Number value, //time between slides changing
     *     'transition': String value, //name of transition class (@see XA.component.carousels.Transitions.Transition)
     *     'isPauseEnabled': Boolean value, //flag, which determines if pause feature is enabled
     *     'timeIndicator': {
     *         'isEnabled': Boolean value, //flag, which determines if time indicator is enabled
     *         'selector': String value, //selector of time indicator html element
     *         'view': String value, //name of view class (@see XA.component.carousels.IndicatorViews.View
     *         'options': Object value //object with options, which will be passed to a time indicator view
     *     }
     * }
     * @constructor
     * @param {Object} $     the jQuery object
     * @param {SliderContext} context    instance of SliderContext class; must be separate for each instance (@see SliderContext)
     * @param {Object} options    Slider options object
     */
    function Slider($, context, options) {
        var defaults = {
            'navigation': {},
            'timeout': 10000,
            'transition': 'BasicTransition',
            'isPauseEnabled': true,
            'timeIndicator': {
                'isEnabled': false,
                'selector': null,
                'view': 'View',
                'options': {}
            }
        };

        /**
         * Instance of SliderContext class (@see SliderContext)
         *
         * @member Navigation
         */
        this.context = context;

        context.owner = this;
        context.defaults = defaults;
        context.settings = $.extend(true, {}, defaults, options);
        context.transitionSettings.$slides = context.$slides;
    }

    /**
     * Executes method with given methodName on each Timer in context.timers (@see Timer)
     *
     * @member Slider
     * @param {String} methodName   name of a method, which will be executed on timers
     * @param {SliderContext} context    current context
     */
    Slider.prototype.executeOnTimers = function(methodName, context) {
        var i = null,
            timer = null,
            timers = context.timers;

        for (i = 0; i < timers.length; i++) {
            timer = timers[i];
            if (typeof(timer[methodName]) === 'function') {
                timer[methodName]();
            }
        }
    };

    /**
     * Deschedules change of a slide, by clearing timeout previously set by setTiemout() function.
     *
     * @member Slider
     * @param {SliderContext} context    current context
     */
    Slider.prototype.descheduleSlide = function(context) {
        if (context.timeoutId !== null) {
            clearTimeout(context.timeoutId);
            context.timeoutId = null;
        }
    };

    /**
     * Schedules change of a slide, by setting timeout (using setTiemout() function) if can.
     * If can't, tries again after short period of time.
     *
     * @member Slider
     * @param {SliderContext} context    current context
     */
    Slider.prototype.scheduleSlide = function(context) {
        var owner = context.owner;

        owner.descheduleSlide(context);

        if (!context.preventScheduling && context.$slides.size() > 1) {
            owner.executeOnTimers('set', context);

            if (context.canChangeSlide) {
                if (context.timeIndicator !== null) {
                    context.timeIndicator.play();
                }
                context.timeoutId = setTimeout(function() {
                    owner.changeCurrentSlideBy(1, context);
                }, context.settings.timeout - context.slideTimer.elapsed);
            } else {
                setTimeout(function() {
                    owner.scheduleSlide(context);
                }, 100);
            }
        }
    };

    /**
     * Changes current slide, by offset performing context.transition
     * Any offset value is save (if it is an integer).
     *
     * @member Slider
     * @param {Number} offset    the offset to an index of a new slide
     * @param {SliderContext} context    current context
     */
    Slider.prototype.changeCurrentSlideBy = function(offset, context) {
        var settings = context.transitionSettings,
            $currentSlide = context.getCurrentSlide(),
            $slides = context.$slides;

        if ((offset % $slides.size()) !== 0) {
            context.canChangeSlide = false;

            settings.offset = offset;
            settings.$currentSlide = $currentSlide;
            settings.$nextSlide = $slides.eq(($currentSlide.index() + offset) % $slides.size());

            context.changeCurrentSlide(settings.$nextSlide);
            context.transition.perform(context.transitionSettings);
            context.owner.executeOnTimers('reset', context);
        }


        var $carousel = $(context.$wrapper).parents(".carousel");
        $carousel.trigger("slide-changed");
    };

    /**
     * Starts automatic slides changing
     *
     * @member Slider
     */
    Slider.prototype.run = function() {
        this.executeOnTimers('reset', this.context);
        this.scheduleSlide(this.context);
    };

    /**
     * Cancel the default action of event and changes slide manually.
     *
     * @member Slider
     * @param {Object} event     the event
     * @param {Number} offset    the offset to an index of a new slide
     * @param {SliderContext} context    current context
     */
    Slider.prototype.onChangeCurrentSlide = function(event, offset, context) {
        var owner = context.owner;

        event.preventDefault();
        if (context.canChangeSlide) {
            owner.descheduleSlide(context);
            owner.changeCurrentSlideBy(offset, context);
        }
    };

    /**
     * Selects navigation item with given index.
     *
     * @member Slider
     * @param {Number} index     the index of navigation item
     */
    Slider.prototype.selectNavigationItem = function(index) {
        this.context.navigation.selectItem(index);
    };
    /**
     * end of Slider class
     */

    /**
     * SliderInitializer object set up instances of Slider class
     */
    SliderInitializer = (function($) {
        /**
         * Attaches events to navigation items.
         *
         * @param {SliderContext} context   a context of a Slider class instance
         */
        function attachNavigationEvents(context) {
            var owner = context.owner,
                $navLinks = context.$wrapper.find(".nav a"),
                $prevItemTxt = context.$wrapper.find('.prev-text'),
                $nextItemTxt = context.$wrapper.find('.next-text');

            context.navigation.$items.each(function(index) {
                var $slide = context.$slides.eq(index);

                $(this).click(function(event) {
                    owner.onChangeCurrentSlide(event, $slide.index() - context.getCurrentSlide().index(), context);
                });
            });

            $prevItemTxt.click(function(event) {
                owner.onChangeCurrentSlide(event, -1, context);
            });

            $nextItemTxt.click(function(event) {
                owner.onChangeCurrentSlide(event, 1, context);
            });

            context.navigation.$prevItem.click(function(event) {
                owner.onChangeCurrentSlide(event, -1, context);
            });

            context.navigation.$nextItem.click(function(event) {
                owner.onChangeCurrentSlide(event, 1, context);
            });

            $navLinks.on("keydown", function(event){
                switch(event.keyCode){
                    case 37:
                        owner.onChangeCurrentSlide(event, -1, context);
                        $(this).parent().find(".active").focus();
                        break;
                    case 39:
                        owner.onChangeCurrentSlide(event, 1, context);
                        $(this).parent().find(".active").focus();
                        break;
                }
            });
        }

        /**
         * Attaches pause event to navigation wrapper.
         *
         * @param {SliderContext} context   a context of a Slider class instance
         */
        function attachPauseEvent(context) {
            var owner = context.owner,
                $element = context.$wrapper,
                $navLinks = $element.find(".nav a");

            var callbackMouseenter = function(){
                context.preventScheduling = true;
                owner.descheduleSlide(context);

                owner.executeOnTimers('update', context);
                if (context.timeIndicator !== null) {
                    context.timeIndicator.pause();
                }
            }

            $element.mouseenter(callbackMouseenter);
            $navLinks.on("focus", callbackMouseenter);

            var callbackMouseLeave = function(){
                context.preventScheduling = false;
                owner.scheduleSlide(context);
            }

            $element.mouseleave(callbackMouseLeave);
            $navLinks.on("blur", callbackMouseLeave);
        }

        /**
         * Creates time indicator view
         *
         * @param {SliderContext} context   a context of a Slider class instance
         */
        function createIndicator(context) {
            var settings = context.settings,
                timeIndicator = null,
                ViewConstructor = XA.component.carousels.IndicatorViews[settings.timeIndicator.view],
                view = null;

            if (ViewConstructor !== null) {
                view = new ViewConstructor(settings.timeIndicator.selector, settings.timeIndicator.options);
                timeIndicator = new TimeIndicator($, view, settings.timeout);
                context.timeIndicator = timeIndicator;
                context.timers.push(timeIndicator);
            }
        }

        /**
         * Attaches events to navigation.
         *
         * @param {SliderContext} context   a context of a Slider class instance
         */
        function initializeNavigation(context) {
            context.settings.navigation.slidesCount = context.$slides.length;
            context.navigation = new Navigation($, context.$wrapper, context.settings.navigation);
            attachNavigationEvents(context);

            if (context.settings.isPauseEnabled) {
                attachPauseEvent(context);
            }
        }

        /**
         * Initializes transition for a given context.
         *
         * @param {SliderContext} context   a context of a Slider class instance
         */
        function initializeTransition(context) {
            var TransitionConstructor = null,
                owner = context.owner;

            context.transitionSettings.callback = function() {
                context.canChangeSlide = true;

                if (context.preventScheduling) {
                    owner.executeOnTimers('reset', context);
                } else {
                    owner.scheduleSlide(context);
                }
            };

            TransitionConstructor = XA.component.carousels.Transitions[context.settings.transition];
            if ((TransitionConstructor === null) || (TransitionConstructor === undefined)) {
                TransitionConstructor = XA.component.carousels.Transitions[context.defaults.transition];
            }
            context.transition = new TransitionConstructor();
            context.transition.init(context.transitionSettings);
        }

        return {
            /**
             * Initializes Slider object with a given context.
             *
             * @param {SliderContext} context   a context of a Slider class instance
             */
            initialize: function(context) {
                initializeNavigation(context);
                initializeTransition(context);

                if (context.settings.timeIndicator.isEnabled) {
                    createIndicator(context);
                }
            }
        };
    }($));
    /**
     * end of SliderInitializer
     */

    /**
     * Carousel class displays one slide (some content) at the time.
     * Its behaviour depends on settings (passed to init() method).
     * For more details @see Slider, @see SliderInitializer, @see Navigation,
     * @see NavigationBuilder, @see XA.component.carousels.Transitions.Transition,
     * @see XA.component.carousels.IndicatorViews.View
     *
     * @constructor
     */
    function Carousel($) {
        var context = this;

        /**
         * Instance of a Slider class (@see Slider).
         *
         * @member Carousel
         */
        this.slider = null;
        /**
         * Displayed slide (jQuery object).
         *
         * @member Carousel
         */
        this.$currentSlide = null;
        /**
         * All slides (jQuery object).
         *
         * @member Carousel
         */
        this.$slides = null;

        /**
         * Changes current slide to a $newSlide.
         *
         * @member Carousel
         * @param {Object} $newSlide  the new slide (jQuery) object.
         */
        this.changeCurrentSlide = function($newSlide) {
            context.$currentSlide = $newSlide;
            context.slider.selectNavigationItem($newSlide.index());
        };

        /**
         * Returns current slide.
         *
         * @member Carousel
         * @return current slide (jQuery) object.
         * @type Object
         */
        this.getCurrentSlide = function() {
            return context.$currentSlide;
        };
    }

    /**
     * Resets the carousel.
     *
     * @member Carousel
     */
    Carousel.prototype.reset = function() {
        this.$slides.each(function(index) {
            $(this).hide();
        });

        this.changeCurrentSlide(this.$slides.first());
        this.$currentSlide.show();
    };

    /**
     * Initializes the carousel.
     * Wrapps carousel content with <div class="wrapper" /> element,
     * selects slides (<li /> elements) from <ul class="slides" /> element,
     * initializes Slider class inctance, resets the carousel and start automatic slides changing.
     *
     * @member Carousel
     * @param {Object} $container     jQuery object with a main html element of the carousel
     * @param {Object} options     carousel options object
     */
    Carousel.prototype.init = function($container, options) {
        var $wrapper = $('<div/>', {
                'class': 'wrapper'
            }),
            sliderContext = null;

        $wrapper.append($container.children().detach());
        $container.append($wrapper);
        this.$slides = $container.find('.slides li.slide');

        sliderContext = new SliderContext();
        sliderContext.changeCurrentSlide = this.changeCurrentSlide;
        sliderContext.getCurrentSlide = this.getCurrentSlide;
        sliderContext.$slides = this.$slides;
        sliderContext.$wrapper = $wrapper;

        this.slider = new Slider($, sliderContext, options);
        SliderInitializer.initialize(sliderContext);

        this.reset();
        this.slider.run();
    };
    /**
     * end of Carousel class
     */

    /**
     * Registers each elements that match the provided selector as a carousel with a given options.
     * Carousel options object :
     * {
     *     //
     *     // navigation: Object
     *     //
     *     // The navigation configuration object.
     *     //
     *     'navigation': {
     *         //
     *         //isEnabled: Boolean
     *         //
     *         // Sets whether the navigation is enabled.
     *         //
     *         'isEnabled': true,
     *         //
     *         // hasPrevNextItems: Boolean
     *         //
     *         // Sets whether the navigation has previous and next buttons.
     *         //
     *         'hasPrevNextItems': true,
     *         //
     *         // item: Object
     *         //
     *         // Navigation item configuration object.
     *         //
     *         'item': {
     *             //
     *             // label: String
     *             //
     *             // Label template; each '#{index}' string will be replaced by the number of a slide.
     *             //
     *             'label': '#{index}',
     *             //
     *             // selector: String
     *             //
     *             // Navigation items container selector; if equals null, the container will be generated
     *             // ('div' element with 'nav' class attribute inside the carousel).
     *             //
     *             'selector': null
     *        },
     *         //
     *         // prevItem: Object
     *         //
     *         // Navigation 'previous item' configuration object.
     *         //
     *         'prevItem': {
     *             //
     *             // label: String
     *             //
     *             // The 'previous item' label.
     *             //
     *             'label': '<',
     *             //
     *             // selector: String
     *             //
     *             // Navigation 'previous item' selector; if equals null, the item will be generated
     *             // ('a' element with 'prev' class attribute inside the navigation container).
     *             //
     *             'selector': null,
     *             //
     *             // isContainer: Boolean
     *             //
     *             // Sets whether the element found by selector should be treated as a container (if true)
     *             // or should be adopted as a 'previous item' (if false). If selector equals null this property is meaningless.
     *             //
     *             'isContainer': false
     *         },
     *         //
     *         // nextItem: Object
     *         //
     *         // Navigation 'next item' configuration object.
     *         //
     *         'nextItem': {
     *             //
     *             // label: String
     *             //
     *             // The 'next item' label.
     *             //
     *             'label': '>',
     *             //
     *             // selector: String
     *             //
     *             // Navigation 'next item' selector; if equals null, the item will be generated
     *             // ('a' element with 'next' class attribute inside the navigation container).
     *             //
     *             'selector': null,
     *             //
     *             // isContainer: Boolean
     *             //
     *             // Sets whether the element found by selector should be treated as a container (if true)
     *             // or should be adopted as a 'next item' (if false). If selector equals null this property is meaningless.
     *             //
     *             'isContainer': false
     *         }
     *     },
     *     //
     *     // timeout: Number
     *     //
     *     // The interval between the slides in miliseconds.
     *     //
     *     'timeout': 10000,
     *     //
     *     // transition: String
     *     //
     *     // Name of the transition class, which will be used. Possible values are:
     *     // - BasicTransition - without any animation,
     *     // - FadeInTransition - new slide fades in,
     *     // - SlideHorizontallyTransition - new slide moves from right (from left if user selects slide with lower id or clicks on 'previous item'),
     *     // - SlideVerticallyTransition - new slide moves from top (from bottom if user selects slide with lower id or clicks on 'previous item'),
     *     // - other - if implemented (derived from XA.component.carousels.Transitions.Transition class) and added to XA.component.carousels.Transitions module.
     *     //
     *     'transition': 'BasicTransition',
     *     //
     *     // isPauseEnabled: Boolean
     *     //
     *     // Sets whether the pause feature is enabled.
     *     // Pause feature pauses countdown of changing slides, when mouse is in a carousel area.
     *     //
     *     'isPauseEnabled': true,
     *     //
     *     // timeIndicator: Object
     *     //
     *     // 'Time indicator' configuration object.
     *     //
     *     'timeIndicator': {
     *         //
     *         // isEnabled: Boolean
     *         //
     *         // Sets whether the 'time indicator' is enabled.
     *         //
     *         'isEnabled': false,
     *         //
     *         // selector: String
     *         //
     *         // 'Time indicator' selector.
     *         //
     *         'selector': null,
     *         //
     *         // view: String
     *         //
     *         // Name of the view class, which will be used. Possible values are:
     *         // - View - without any animation (base class),
     *         // - ProgressBarView - shows the progress of time as progress bar,
     *         // - RotatorView - shows the progress of time with the filling up ring
     *         // - other - if implemented (derived from XA.component.carousels.IndicatorViews.View class) and added to XA.component.carousels.IndicatorViews module.
     *         //
     *         'view': 'View',
     *         //
     *         // options: Object
     *         //
     *         // 'Time indicator' view settings object. Depends on view.
     *         //
     *         'options': {}
     *     }
     * }
     */

    /* pub.register = function (selector, options) {
     var $carousels = $(selector);
     $carousels.each(function () {
     //var carousel = new Carousel($);
     console.log($(this));
     //carousel.init($(this), options);
     });
     };*/

    Carousel.prototype.addResponsive = function(carousel) {
        function setCarouselSize() {
            carousel.css("width", "100%");
            carousel.css("height", "auto");
            carousel.find(".wrapper , .slide").css("height", "auto");

            var carouselWidth = carousel.width(),
                slides = carousel.find('.slide'),
                slideMaxHeight = 0;


            _.each(slides, function(item) {
                var slideHeight = $(item).outerHeight();

                if (slideMaxHeight < slideHeight) {
                    slideMaxHeight = slideHeight;
                }
            });

            carousel.find(".slide, .slides").css("width", carouselWidth);
            carousel.find(".wrapper").css("height", slideMaxHeight);
            carousel.find(".slide").css("height", slideMaxHeight);
        }

        setCarouselSize();
        window.addEventListener('resize', function() {
            setCarouselSize();
        });
        window.addEventListener('load', function() {
            setCarouselSize();
			carousel.addClass("carousel-ready");
        });
    };

    /* Carousel touch support */
    Carousel.prototype.swipeSlide = function (e) {
        var self = this,
            $wrapper = this.slider.context.$wrapper,
            hammer = new Hammer($wrapper[0]);

        hammer.on("swipeleft", function(e) {
            self.slider.context.owner.onChangeCurrentSlide(e, 1, self.slider.context);
        });

        hammer.on("swiperight", function(e) {
            self.slider.context.owner.onChangeCurrentSlide(e, -1, self.slider.context);
        });
    };

    Carousel.prototype.checkForDisabler = function () {
        var slides = this.$slides;
        $wrapper = this.slider.context.$wrapper;
        _.each(slides, function(item) {
            var $item = $(item),
                cpdisabled = $item.find('.cpdisabler'),
                $itemBorder = parseInt($(item).css('border'), 10) ? parseInt($(item).css('border'), 10)  : 10;

            if (cpdisabled.siblings('.component').length < 1) {
                $wrapper.css({
                    'min-height' : 25
                })
                cpdisabled.text("Edit element here");
                cpdisabled.parent().css({
                    'width' : $item.width() - $itemBorder,
                    'min-height' : 25,
                    'height' : $item.height()
                });
            }
        });
    }


    Carousel.prototype.resizeWrapper = function() {
        var pageHeight = $(document).outerHeight(),
            headerHeight = $('#header').outerHeight(),
            contentPaddingTop = parseInt($('#content').css('padding-top'), 10),
            contentPaddingBottom = parseInt($('#content').css('padding-bottom'), 10),
            contentPadding = contentPaddingTop + contentPaddingBottom,
            footerHeight = $('#footer').outerHeight(),
            wrapper = this.slider.context.$wrapper,
            carouselHeight = 0;

        carouselHeight = pageHeight - (headerHeight + footerHeight + contentPadding);

        wrapper.css({
            'height': carouselHeight
        });

        wrapper.find('.slides').css({
            'height': carouselHeight
        });
    };



    pub.init = function() {
        $(".carousel:not(.initialized)").each(function() {
            var properties = $(this).data("properties"),
                component = $(this).find(".carousel-inner"),
                id = component.attr("id");

            if (properties) {
                properties.navigation.item.selector = "#" + properties.navigation.item.selector;
                properties.navigation.prevItem.selector = "#" + id + " .nav";
                properties.navigation.nextItem.selector = "#" + id + " .nav";

                var carousel = new Carousel($);
                carousel.init(component, properties);
                carousel.addResponsive($(this));

                window.addEventListener('load', function(e) {
                    if($(self).hasClass('carousel-clients')) {
                        carousel.resizeWrapper();
                    }

                    carousel.checkForDisabler();
                });

                carousel.swipeSlide();
            }

            $(this).addClass("initialized");
        });
    };

    return pub;
}(jQuery));
/**
 * end of XA.component.carousels module.
 */


XA.register("carousels", XA.component.carousels);


/**
 * Cognifide
 *
 * XA.component.carousels.Transitions module.
 *
 * Exposes Transition class, which is base class of all transitions used by carousels (@see XA.component.carousels, @see Slider, @see Transition).
 * Also exposes implementation of basic effects:
 * - BasicTransition - without any animation,
 * - FadeInTransition - new slide fades in,
 * - SlideHorizontallyTransition - new slide moves from right (from left if user selects slide with lower id or clicks on 'previous item'),
 * - SlideVerticallyTransition - new slide moves from top (from bottom if user selects slide with lower id or clicks on 'previous item').
 * Carousel takes the class constructor by name from this module (it is given in options object of carousel; @see XA.component.carousels).
 * If there is a need to implement the new effect, create a new class, by inheriting from Transition class and add it to this module.
 *
 * Example effect implementation (currently displayed slide is shrinking to center of the carousel):
 * (function () {
*     function SampleTransition() { }
*
*     //inherit from XA.component.carousels.Transitions.Transition
*     SampleTransition.prototype = new XA.component.carousels.Transitions.Transition();
*     SampleTransition.constructor = SampleTransition;
*
*     SampleTransition.prototype.init = function (settings) {
*         //positioning all slides in the top left corner of the carousel
*         settings.$slides.css({
*             'position': 'absolute',
*             'top': '0px',
*             'left': '0px'
*         });
*     };
*
*     SampleTransition.prototype.onAnimationComplete = function(settings, width, height) {
*         var zIndexAttrib = 'z-index',
*         $current = settings.$currentSlide;
*
*         $current.hide();
          //reverting changes in css properties
*         $current.css({
*             'width': width,
*             'height': height,
*             'left': 0,
*             'top': 0
*         });
*         $current.css(zIndexAttrib, '');
*         settings.$slides.parent().css(zIndexAttrib, '');
*
*         //notifying the carousel, that animation is completed
*         settings.callback();
*     };
*
*     SampleTransition.prototype.perform = function (settings) {
*         var height = settings.$currentSlide.height(),
*         width = settings.$currentSlide.width(),
*         onAnimationCompleted = this.onAnimationComplete,
*         zIndexAttrib = 'z-index',
*         $parent = settings.$slides.parent(),
*         $current = settings.$currentSlide,
*         $next = settings.$nextSlide;
*
*         //setting a new slide under the current slide
*         $parent.css(zIndexAttrib, 0);
*         $current.css(zIndexAttrib, 1);
*         $next.show();
*
*         //animate current slide
*         $current.animate({
*             'width': '0px',
*             'height': '0px',
*             'left': width / 2,
*             'top': height / 2
*         }, function() {
*             onAnimationCompleted(settings, width, height);
*         });
*     };
*
*     //adding new effect to XA.component.carousels.Transitions module.
*     XA.component.carousels.Transitions.SampleTransition = SampleTransition;
* } ());
 *
 */
XA.component.carousels.Transitions = (function($) {
    var pub = {};

    /**
     * TransitionSettings class holds data needed for changing slides
     * @constructor
     */
    function TransitionSettings() {}
    /**
     * Current slide (currently displayed) jQuery object
     *
     * @member TransitionSettings
     */
    TransitionSettings.prototype.$currentSlide = null;
    /**
     * Next slide jQuery object
     *
     * @member TransitionSettings
     */
    TransitionSettings.prototype.$nextSlide = null;
    /**
     * All slides (jQuery object)
     *
     * @member TransitionSettings
     */
    TransitionSettings.prototype.$slides = null;
    /**
     * Offset between $currentSlide and $nextSlide
     *
     * @member TransitionSettings
     */
    TransitionSettings.prototype.offset = 0;
    /**
     * Callback function which must be called after animation.
     *
     * @member TransitionSettings
     */
    TransitionSettings.prototype.callback = null;
    /**
     * end of TransitionSettings class
     */
    pub.TransitionSettings = TransitionSettings;

    /**
     * Transition class is a base class of all transitions.
     *
     * Important: settings.callback() (@see TransitionSettings) have to be called at the end of execution the perform() method.
     *
     * @constructor
     */
    function Transition() {}
    Transition.prototype = new Transition();
    /**
     * Initializes a transition with given settings (@see TransitionSettings).
     *
     * @member Transition
     * @param {TransitionSettings} settings  transition settings
     */
    Transition.prototype.init = function(settings) {};
    /**
     * Returns a factor associated with settings.offset (@see TransitionSettings), which
     * can be usefull for some animations.
     *
     * @member Transition
     * @param {TransitionSettings} settings  transition settings
     * @return The factor; 1 if offset is higher than 0, -1 otherwise
     * @type Number
     */
    Transition.prototype.factor = function(settings) {
        return (settings.offset > 0) ? 1 : -1;
    };
    /**
     * This method is called used by carousels to change slides.
     *
     * Important: settings.callback() (@see TransitionSettings) have to be called at the end of this method execution.
     *
     * @member Transition
     * @param {TransitionSettings} settings  transition settings
     */
    Transition.prototype.perform = function(settings) {
        settings.callback();
    };
    /**
     * End of Transition class
     */
    pub.Transition = Transition;

    /**
     * BasicTransition class changes slides without any animation.
     * Do not remove this class, becaouse carousels will use it by default,
     * if requested transition cannot be found.
     * @constructor
     */
    function BasicTransition() {}
    BasicTransition.prototype = new Transition();
    BasicTransition.constructor = BasicTransition;
    /**
     * @member BasicTransition
     */
    BasicTransition.prototype.perform = function(settings) {
        settings.$currentSlide.hide();
        settings.$nextSlide.show();

        settings.callback();
    };
    /**
     * End of BasicTransition class
     */
    pub.BasicTransition = BasicTransition;

    /**
     * FadeInTransition class changes slides by fading in new slide.
     * This class can be removed if effect is not used.
     * @constructor
     */
    function FadeInTransition() {}
    FadeInTransition.prototype = new Transition();
    FadeInTransition.constructor = FadeInTransition;
    /**
     * @member FadeInTransition
     */
    FadeInTransition.prototype.init = function(settings) {
        /*settings.$slides.css({
         'position': 'absolute',
         'top': '0px',
         'left': '0px'
         });*/
    };
    /**
     * @member FadeInTransition
     */
    FadeInTransition.prototype.perform = function(settings) {
        var zIndexAttrib = 'z-index',
            $parent = settings.$slides.parent(),
            $nextSlide = settings.$nextSlide;

        $parent.css(zIndexAttrib, 0);
        $nextSlide.css(zIndexAttrib, 1);
        settings.$slides.css({
            'position': 'relative'
        });

        settings.$nextSlide.css({
            'position': 'absolute',
            'top': '0px',
            'left': '0px'
        });


        $nextSlide.fadeIn(function() {
            settings.$currentSlide.hide();

            settings.$nextSlide.css({
                'position': 'relative'
            });

            $nextSlide.css(zIndexAttrib, '');
            $parent.css(zIndexAttrib, '');

            settings.callback();
        });
    };
    /**
     * End of FadeInTransition class
     */
    pub.FadeInTransition = FadeInTransition;

    /**
     * SlideHorizontallyTransition class changes slides by sliding them horizontally.
     * This class can be removed if effect is not used.
     * If offset (difference between index of currently displayed slide and index of slide that will be shown)
     * is greater than 0, slides are sliding to the left. Otherwise (offset is lower than 0), slides are sliding
     * to the left.
     * When slide change is raised automatically, slides are always sliding to right (offset == 1).
     * If user raises slides change, slides are sliding:
     * - to left, if offset is greater than 0 (slide with higher index will be shown or user clicks on 'next' navigation item),
     * - to right, if offset is lower than 0 (slide with lower index will be shown or user clicks on 'prev' navigation item).
     * @constructor
     */
    function SlideHorizontallyTransition() {}
    SlideHorizontallyTransition.prototype = new Transition();
    SlideHorizontallyTransition.constructor = SlideHorizontallyTransition;
    /**
     * @member SlideHorizontallyTransition
     */
    SlideHorizontallyTransition.prototype.onAnimationComplete = function(settings, $parent) {
        settings.$currentSlide.hide();
        settings.$nextSlide.css({
            'position': '',
            'top': '',
            'left': ''
        });

        $parent.css('margin-left', '');

        settings.callback();
    };
    /**
     * @member SlideHorizontallyTransition
     */
    SlideHorizontallyTransition.prototype.perform = function(settings) {
        var factor = this.factor(settings),
            onAnimationComplete = this.onAnimationComplete,
            width = settings.$currentSlide.width(),
            $parent = settings.$slides.parent();

        settings.$nextSlide.css({
            'position': 'absolute',
            'top': '0px',
            'left': factor * width
        });
        settings.$nextSlide.show();

        $parent.animate({
            'margin-left': -factor * width
        }, function() {
            onAnimationComplete(settings, $parent);
        });
    };
    /**
     * End of SlideHorizontallyTransition class
     */
    pub.SlideHorizontallyTransition = SlideHorizontallyTransition;

    /**
     * SlideVerticallyTransition class changes slides by sliding them vertically.
     * This class can be removed if this effect is not used.
     * If offset (difference between index of currently displayed slide and index of slide that will be shown)
     * is greater than 0, slides are sliding from up to down. Otherwise (offset is lower than 0), slides are sliding
     * from down to up.
     * When slide change is raised automatically, slides are always sliding from up to down (offset == 1).
     * If user raises slides change, slides are sliding:
     * - from up to down, if offset is greater than 0 (slide with higher index will be shown or user clicks on 'next' navigation item),
     * - from down to up, if offset is lower than 0 (slide with lower index will be shown or user clicks on 'prev' navigation item).
     * @constructor
     */
    function SlideVerticallyTransition() {}
    SlideVerticallyTransition.prototype = new Transition();
    SlideVerticallyTransition.constructor = SlideVerticallyTransition;
    /**
     * @member SlideVerticallyTransition
     */
    SlideVerticallyTransition.prototype.onAnimationComplete = function(settings, $parent) {
        settings.$currentSlide.hide();
        settings.$nextSlide.css({
            'position': '',
            'top': '',
            'left': ''
        });

        $parent.css('margin-top', '');

        settings.callback();
    };
    /**
     * @member SlideVerticallyTransition
     */
    SlideVerticallyTransition.prototype.perform = function(settings) {
        var factor = this.factor(settings),
            onAnimationComplete = this.onAnimationComplete,
            height = settings.$currentSlide.height(),
            $parent = settings.$slides.parent();

        settings.$nextSlide.css({
            'position': 'absolute',
            'top': -factor * height,
            'left': '0px'
        });
        settings.$nextSlide.show();

        $parent.animate({
            'margin-top': factor * height
        }, function() {
            onAnimationComplete(settings, $parent);
        });
    };
    /**
     * SlideVerticallyTransition class
     */
    pub.SlideVerticallyTransition = SlideVerticallyTransition;

    return pub;
}(jQuery));
/**
 * end of XA.component.carousels.Transitions module.
 */

/**
 * Cognifide
 *
 * XA.component.carousels.IndicatorViews module.
 *
 * Exposes View class, which is a base class of all 'time indicator' views used by carousels (@see XA.component.carousels, @see View).
 * Also exposes implementation of these 'time indicator' views:
 * - ProgressBarView - shows the progress of time, that looks like a progress bar,
 * - RotatorView - shows the progress of time with the filling up ring.
 * Carousel takes the class constructor by name from this module (it is given in options object of carousel; @see XA.component.carousels).
 * If there is a need to implement the new 'time indicator' view, create a new class,
 * by inheriting from View class and add it to this module. During implementation of a new 'time indicator'
 * view the XA.component.carousels.IndicatorsView.Tools namespace may be usefull. It contains:
 * - isCssSupported(props) function, which checks if any of CSS properties is supported (props - array of properties),
 * - isTransformSupported() function, which checks if CSS 3 'transform' is supported.
 *
 * Example view implementation (opacity increases with a progress of the time):
 * (function() {
 *     var View = XA.component.carousels.IndicatorViews.View;
 *
 *     function SampleView (selector, options) {
 *         //base constructor have to be called
 *         View.call(this, selector);
 *     }
 *
 *     SampleView.prototype = new View();
 *     SampleView.constructor = SampleView;
 *
 *     SampleView.prototype.init = function (timeout) {
 *         //base method have to be called
 *         View.prototype.init.call(this, timeout);
 *
 *         //initialization code - not needed in this example
 *     };
 *
 *     SampleView.prototype.reset = function () {
 *         //base method have to be called
 *         View.prototype.reset.call(this);
 *
 *         //reseting 'time indicator' view
 *         this.$indicator.stop(true);
 *         this.$indicator.css('opacity', 0);
 *     };
 *
 *     SampleView.prototype.pause = function () {
 *         //stoping 'time indicator' view animation
 *         this.$indicator.stop(true);
 *     };
 *
 *     SampleView.prototype.play = function () {
 *         //starting/resuming 'time indicator' view animation
 *         this.$indicator.animate({
 *             'opacity': 1
 *         }, this.timeout - this.timeElapsed, 'linear');
 *     };
 *
 *     XA.component.carousels.IndicatorViews.SampleView = SampleView;
 * }());
 *
 */
XA.component.carousels.IndicatorViews = (function($) {
    var pub = {},
        supportElementStyle = null;

    /**
     * Checks if any of CSS properties is supported.
     *
     * @param {Array} props     array of properties to be checked
     * @return true if any of CSS properties is supported, false otherwise
     * @type Boolean
     */
    function isCssSupported(props) {
        var i,
            isSupported = false;

        if (supportElementStyle === null) {
            supportElementStyle = document.createElement('supportElement').style;
        }

        for (i = 0; i < props.length; i++) {
            if (supportElementStyle[props[i]] !== undefined) {
                isSupported = true;
                break;
            }
        }

        return isSupported;
    }

    /**
     * Checks if CSS 3 'transform' is supported.
     *
     * @return true if CSS 3 'transform' is supported, false otherwise
     * @type Boolean
     */
    function isTransformSupported() {
        return isCssSupported(['transformProperty', 'WebkitTransform', 'MozTransform', 'OTransform', 'msTransform']);
    }

    /**
     * XA.component.carousels.IndicatorViews.Tools namespace
     *
     This namespace can be removed if RotatorView class is not used (@see RotatorView)
     */
    pub.Tools = {};
    pub.Tools.isCssSupported = isCssSupported;
    pub.Tools.isTransformSupported = isTransformSupported;
    /**
     * End of namespace
     */

    /**
     * View class is a base class of all 'time indicator' views
     * @constructor
     * @param {String} selector a selector used for searching
     * @param {Object} options   View options object
     */
    function View(selector, options) {
        /**
         * A jQuery object containing element, which will be animated to show pogress of the time.
         *
         * @member View
         */
        this.$indicator = $(selector);
    }
    /**
     * Initializes the view.
     *
     * @member Viewion
     * @param {Number} timeout   a timeout to the end of whole indicator animation
     */
    View.prototype.init = function(timeout) {
        this.timeElapsed = 0;
        this.timeout = timeout;
    };
    /**
     * Resets the view
     *
     * @member View
     */
    View.prototype.reset = function() {
        this.timeElapsed = 0;
    };
    /**
     * Starts/Renews the view animation.
     *
     * @member View
     */
    View.prototype.play = function() {};
    /**
     * Pauses the view animation.
     *
     * @member View
     */
    View.prototype.pause = function() {};
    /**
     * Updates the time that elapsed since animation begin.
     *
     * @member View
     */
    View.prototype.update = function(timeElapsed) {
        this.timeElapsed = timeElapsed;
    };
    /**
     * end of View class
     */
    pub.View = View;

    /**
     * ProgressBarView class provides a logic for animate a 'time indicator',
     * that looks like progress bar.
     *
     * Options object:
     * {
     *     'opacity': Number value //between 0 and 1; default is 0.8
     * }
     *
     * This class can be removed if this kind of view is not used.
     *
     * @constructor
     * @param {String} selector a selector used for searching
     * @param {Object} options   View options object
     */
    function ProgressBarView(selector, options) {
        View.call(this, selector);

        var defaults = {
            'opacity': 0.8
        };

        this.settings = $.extend(true, {}, defaults, options);

        this.$container = this.$indicator;
        this.$indicator = this.$indicator.find('div');
    }
    ProgressBarView.prototype = new View();
    ProgressBarView.constructor = ProgressBarView;
    /**
     * @member ProgressBarView
     */
    ProgressBarView.prototype.init = function(timeout) {
        View.prototype.init.call(this, timeout);

        var opacity = this.settings.opacity;
        this.$container.css('opacity', opacity);
        this.$indicator.css('opacity', opacity);
    };
    /**
     * @member ProgressBarView
     */
    ProgressBarView.prototype.reset = function() {
        View.prototype.reset.call(this);

        this.$indicator.stop(true);
        this.$indicator.css('width', '0px');
    };
    /**
     * @member ProgressBarView
     */
    ProgressBarView.prototype.pause = function() {
        this.$indicator.stop(true);
    };
    /**
     * @member ProgressBarView
     */
    ProgressBarView.prototype.play = function() {
        this.$indicator.animate({
            'width': '100%'
        }, this.timeout - this.timeElapsed, 'linear');
    };
    /**
     * end of ProgressBarView class
     */
    pub.ProgressBarView = ProgressBarView;

    /**
     * RotatorView class provides a logic for animate a 'time indicator',
     * that shows the progress of time with the filling up ring
     *
     * Options object:
     * {
     *     'opacity': Number value //between 0 and 1; default is 0.5
     * }
     *
     * This class can be removed if this kind of view is not used.
     *
     * @constructor
     * @param {String} selector a selector used for searching
     * @param {Object} options   View options object
     */
    function RotatorView(selector, options) {
        View.call(this, selector);

        var defaults = {
            'opacity': 0.5
        };

        this.settings = $.extend(true, {}, defaults, options);
        this.$mask = this.$indicator.find('span.mask').first();
        this.$rotator = this.$indicator.find('span.rotator').first();

        function rotateCss(deg) {
            var value = 'rotate(' + deg + 'deg)';

            return {
                '-webkit-transform': value,
                '-moz-transform': value,
                '-o-transform': value,
                '-ms-transform': value,
                'transform': value
            };
        }

        function animateRotator($rotator, options) {
            var defaults = {
                    'fontSize': '180px',
                    'animateOptions': {
                        'step': function(now, fx) {
                            $rotator.css(rotateCss(now));
                        },
                        'easing': 'linear'
                    }
                },
                settings = $.extend(true, {}, defaults, options);

            $rotator.animate({
                    'font-size': settings.fontSize
                },
                settings.animateOptions);
        }

        function phaseTwoAnimation($mask, $rotator, duration) {
            $rotator.addClass('half');
            $mask.addClass('half');

            animateRotator($rotator, {
                'fontSize': '360px',
                'animateOptions': {
                    'duration': duration
                }
            });
        }

        function phaseOneAnimation($mask, $rotator, duration, phaseTwoDuration) {
            animateRotator($rotator, {
                'animateOptions': {
                    'duration': duration,
                    'complete': function() {
                        phaseTwoAnimation($mask, $rotator, phaseTwoDuration);
                    }
                }
            });
        }

        this.resetCss = function() {
            this.$rotator.removeClass('half');
            this.$rotator.css(rotateCss(0));
            this.$rotator.css('font-size', '0px');

            this.$mask.removeClass('half');
        };

        this.playPhaseOne = function() {
            var duration = this.timeout / 2 - this.timeElapsed;
            phaseOneAnimation(this.$mask, this.$rotator, duration, this.timeout / 2);
        };

        this.playPhaseTwo = function() {
            var duration = this.timeout - this.timeElapsed;
            phaseTwoAnimation(this.$mask, this.$rotator, duration);
        };
    }
    RotatorView.prototype = new View();
    RotatorView.constructor = RotatorView;
    /**
     * @member RotatorView
     */
    RotatorView.prototype.init = function(timeout) {
        View.prototype.init.call(this, timeout);

        if (isTransformSupported()) {
            this.$indicator.show();
            this.$mask.css('opacity', this.settings.opacity);
        }
    };
    /**
     * @member RotatorView
     */
    RotatorView.prototype.reset = function() {
        View.prototype.reset.call(this);

        this.$rotator.stop(true);
        this.resetCss();
    };
    /**
     * @member RotatorView
     */
    RotatorView.prototype.pause = function() {
        this.$rotator.stop(true);
    };
    /**
     * @member RotatorView
     */
    RotatorView.prototype.play = function() {
        var phase = this.playPhaseOne;
        if (this.timeElapsed >= this.timeout / 2) {
            phase = this.playPhaseTwo;
        }

        phase.call(this);
    };
    /**
     * end of RotatorView class
     */
    pub.RotatorView = RotatorView;

    return pub;
}(jQuery));
/**
 * end of XA.component.carousels.IndicatorViews module.
 */
XA.component.parallax = (function ($, _) {
	var api = {};

	function checkMobile() {
		return $(window).width() < 768;
	}

	function makeParallax($el) {
		var $bg = $el.children(".component-content"),
			vHeight = $(window).height(),
			elOffset = $bg[0].offsetTop,
			elHeight = $bg[0].offsetHeight,
			isMobile = checkMobile();

		function parallax() {
			if (isMobile) {
				return false;
			}

			var offset = $(window).scrollTop();

			if ((elOffset <= offset + vHeight) && (elOffset + elHeight >= offset)) {
				$bg.css("background-position", "50% " + Math.round((elOffset - offset) * 3 / 8) + "px");
			}
		}

		parallax();

		$(document).on("scroll", _.throttle(parallax, 10));
		$(window).on("resize", _.throttle(function() {
			isMobile = checkMobile();
			isMobile ? $bg.css("background-position", "50% 0") : parallax();
		}, 150));
	}

	api.init = function () {
		$('.parallax-background:not(.initialized)').each(function() {
			makeParallax($(this));
			$(this).addClass('initialized');
		});
	};

	return api;

})(jQuery, _);

XA.register('parallax-background', XA.component.parallax);
XA.component.cookie = (function ($, document) {

    var cookieWarning,
        cookiePosition = "top",
        submitTag,
        api = {
            settings: {
                submit: $("submit"),
                defaultPos: function () {
                    if (cookieWarning.hasClass("cookie-bottom")) {
                        cookiePosition = "bottom";
                        cookieWarning.css("display", "block");
                    } else {
                        cookiePosition = "top";
                        cookieWarning.css("display", "block");
                    }
                }
            },

            init: function () {
                cookieWarning = $(".cookie-warning:not(.initialized)");
                var isEmpty = cookieWarning.find(".component-content").children().length;

                if (isEmpty) {
                    var s = this.api.settings;
                    s.defaultPos();
                    submitTag = $(".submit a");
                    submitTag.attr("tabIndex",1);
                    submitTag.attr("title","Allow cookies");
                    if (cookiePosition == "top") {
                        // Serve from top of page
                        submitTag.on('click', function (e) {
                            e.preventDefault();
                            XA.cookies.createCookie("cookie-warning", 1, 365);
                            cookieWarning.animate({
                                top: "-300px"
                            }, 1000, function () {
                                cookieWarning.remove();
                            });
                        });
                    } else {
                        // Serve from bottom of page
                        submitTag.on('click', function (e) {
                            e.preventDefault();
                            XA.cookies.createCookie("cookie-warning", 1, 365);
                            cookieWarning.animate({
                                bottom: "-300px"
                            }, 1000, function () {
                                cookieWarning.remove();
                            });
                        });
                    }
                }

                cookieWarning.addClass("initialized");
            }
        };

    return api;
    
})(jQuery, document);


XA.register("cookie", XA.component.cookie);
XA.component.disqus = (function ($, document) {

    var api = {};

    function initDisqus(prop) {
        var dsq = document.createElement('script');
        dsq.type = 'text/javascript';
        dsq.async = true;
        dsq.src = '//' + prop.disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] ||
        document.getElementsByTagName('body')[0]).appendChild(dsq);
    }


    api.init = function () {
        var disqus = $('.disqus:not(.initialized)');

        disqus.each(function () {
            var properties = $(this).data('properties');
            if ($(this).find("#disqus_thread").length > 0) {
                initDisqus(properties);
            }

            $(this).addClass('initialized');
        });
    };

    return api;
}(jQuery, document));

XA.register('disqus', XA.component.disqus);
XA.component.draggableComparer = function($) {
    var $comparer;
    var maxProducts;
    var showLabels;

    var initSelector = function() {
        $comparer.find('.sibling-image').draggable({
            opacity: 0.7,
            helper: "clone",
            appendTo: 'body',
            start: function(e) {
                var isNotSelected = $(this).parents('.compare-selector').length == 0;
                var maxNumberAchieved = $comparer.find('.compare-selector').find('img.sibling-image').length >= maxProducts;

                if (isNotSelected && maxNumberAchieved) {
                    return false;
                }
            }
        });

        $comparer.find('.compare-selector').droppable({
            accept: '.draggable-comparer .sibling-image',
            drop: function(event, ui) {
                if (ui.draggable.parents('.compare-selector').length > 0) {
                    return;
                }
                var $holder = $(this).find('.sibling-image-holder').last();
                var productId = ui.draggable.data('id');
                var $clone = $holder.parent().clone();
                $clone.data('id', productId);
                $clone.find('.sibling-image-holder').append(ui.draggable);
                $holder.parent().before($clone);
                $('.sibling-name[data-id="' + productId + '"]').parent().hide();
                $(this).find('.compare-button').show();

                var maxNumberAchieved = $comparer.find('.compare-selector').find('img.sibling-image').length >= maxProducts;
                if (maxNumberAchieved) {
                    $(this).find('.sibling-image-holder').last().hide();
                }
            }
        });

        $comparer.find('.siblings').droppable({
            accept: '.draggable-comparer .sibling-image',
            drop: function(event, ui) {
                var productId = ui.draggable.data('id');
                var $holder = $(this).find('.sibling-image-holder[data-id="' + productId + '"]');
                $holder.append(ui.draggable);

                var maxNumberAchieved = $comparer.find('.compare-selector').find('img.sibling-image').length >= maxProducts;
                if (!maxNumberAchieved) {
                    $comparer.find('.compare-selector').find('.sibling-image-holder').last().show();
                }

                $('.compare-selector td').each(function() {
                    if ($(this).data('id') == ui.draggable.data('id')) {
                        $('.sibling-name[data-id="' + ui.draggable.data('id') + '"]').parent().show();
                        $(this).remove();
                        if ($('.compare-selector td').length == 1) {
                            $('.compare-button').hide();
                        }
                        return;
                    }
                });
            }
        });
    };

    var initBack = function() {
        $comparer.find('.compare-back').click(function(e) {
            e.preventDefault();
            $comparer.find('.component-content').css('height', 'auto');
            $comparer.find('.compare-result').fadeTo(400, 0, function() {
                $(this).find('table').remove();
                $(this).hide();
            });
        });
    };

    var initCompare = function() {
        $comparer.find('.product-list-compare').click(function(e) {
            e.preventDefault();
            $comparer.find('.compare-result table').remove();
            var productsToCompare = $comparer.data('sitecore-id');
            var variantItemId = $comparer.data('variantid');
            var linktarget = $comparer.data('linktarget');
            $comparer.find('.compare-selector tr td:not(:last-child) img').each(function() {
                productsToCompare += ',' + $(this).data('sitecore-id');
            });

            $.ajax({
                url: ('/~/XA-feeds/compareitems?ids=' + productsToCompare + '&variantItemId=' + variantItemId).toLowerCase(),
                type: "GET",
                success: function(serverData) {
                    if (serverData.length == 0) {
                        console.log('Empty data');
                        return;
                    }
                    var $table = $(serverData);
                    var $compareResult = $comparer.find('.compare-result');
                    $compareResult.find('.compare-back-holder').before($table);
                    $compareResult.fadeTo(400, 1);
                    setTimeout(function() {
                        var compareResultHeight = $table.outerHeight() + 75;
                        $compareResult.parent().height(compareResultHeight);
                    });
                },
                error: function(data) {
                    console.error(data);
                }
            });
        });
    };

    var pub = {};

    pub.init = function() {
        $('.draggable-comparer').each(function() {
            $comparer = $(this);
            maxProducts = parseInt($comparer.data('max'), 10);
            showLabels = $comparer.data('labels') == 'true' || $comparer.data('labels');
            //XAS-1532 - after closing the properties dialog all images has visibility='hidden' and initialization fails
            $(".sibling-image").css('visibility', 'visible');

            initSelector();
            initCompare();
            initBack();
        });

    };

    return pub;
}($);

XA.register("draggable-comparer", XA.component.draggableComparer);
XA.component.flash = (function ($, document) {

    var api = {};

    function setSize(object) {
        var oldHeight = object.attr('height');
        var oldWidth = object.attr('width');
        var newWidth = object.width();
        //var newHeight = oldHeight * newWidth / oldWidth;
        var newHeight = newWidth / object.height() * 100;
        object.css('height', newHeight);
    }

    function initFlash(component, properties) {
        var content = component.find('.component-content > div');

        component.flash(properties);
        // content.flash(properties);
    }

    function attachEvents(component) {
        $(window).load(function () {
            var object = component.find('embed');
            object.css('width', '100%');
            setSize(object);

            $(window).resize(function () {
                setSize(object);
            });
        });
    }

    api.init = function () {
        var flash = $('.flash:not(.initialized)');

        flash.each(function () {
            var properties = $(this).data('properties');
            initFlash($(this), properties);
            attachEvents($(this));

            $(this).addClass('initialized');
        });
    };

    return api;
}(jQuery, document));

XA.register('flash', XA.component.flash);
XA.component.flip = (function ($, document) {
    var api = {};

    function detectMobile() {
        return 'ontouchstart' in window;
    }

    function setHeight(flip) {

        flip.each(function () {
            var $body = $('body'),
                flipside = $(this).find(".flipsides"),
                side0 = $(this).find(".Side0"),
                side1 = $(this).find(".Side1"),
                sideArr = [];

            //fix for edit mode
            if ($body.hasClass('on-page-editor')) {
                side0 = $(this).find(".Side0_EDIT");
                side1 = $(this).find(".Side1_EDIT");
            }

            sideArr.push(side0.outerHeight());
            sideArr.push(side1.outerHeight());

            flipside.css({
                'height' : ($body.hasClass('on-page-editor')) ? _.max(sideArr) * 2 : _.max(sideArr)
            });
        });
    }

    api.init = function () {
        var flip = $('.flip:not(.initialized)');

        flip.each(function () {

            if ($(this).hasClass('flip-hover') && (!detectMobile())) {
                $(this).hover(function () {
                        $(this).addClass('active');
                    },
                    function () {
                        $(this).removeClass('active');
                    });
            } else {
                $(this).on('click', function () {
                    $(this).toggleClass('active');
                });
            }

            $(this).addClass('initialized');
        });

        window.addEventListener('load', function() {
            setHeight(flip);
        });

        window.addEventListener('resize', function() {
            setHeight(flip);
        });
    };

    return api;

}(jQuery, document));


XA.register('flip', XA.component.flip);
XA.component.calendar = (function ($, document) {

    function GetEvents(selector, options) {
        this.data = options.data;
        this.selector = selector;
        this.options = options;
        this.events = [];

        this.checkSource();
    }

    GetEvents.prototype.checkSource = function () {
        var inst = this;

        switch (inst.options.dataType) {
            case "json":
                inst.getJson();
                new InitCalendar(inst.selector, inst.options, inst.events);
                break;
            case "gcalendar":
                new InitCalendar(inst.selector, inst.options, inst.events);
                break;
        }

    };

    GetEvents.prototype.getJson = function () {
        var inst = this,
            date, dateStop, dateEnd, allDay = false,
            tempObj = [];


        $.each(inst.data, function () {
            date = new Date(this.eventStart).toUTCString();
            dateEnd = new Date(this.eventEnd).toUTCString();

            if (date === dateEnd) {
                allDay = true;
            }

            tempObj = {
                title: this.eventName,
                start: date,
                end: dateEnd,
                eventDescription: this.eventDescription,
                eventLink: this.eventLink,
                eventClass: this.eventClass
            };

            inst.events.push(tempObj);
        });

    };


    /*--------------------------------------------*/

    function toGMT(date) {
        return new Date(date.valueOf() + date.getTimezoneOffset() * 60000);
    }

    function InitCalendar(selector, options, events) {
        var inst = this,
            prevNext = "",
            title = "",
            columnFormat,
            calendarTypes = "";

        if (options.dataType === "gcalendar") {
            events = options.dataUrl;
        }

        options.showPrevNext? prevNext = "prev, next" : "";
        options.showMonthCaptions? title = "title" : "";

        for (var i in options.calendarTypes) {
            if (options.calendarTypes[i] === "day") {
                options.calendarTypes[i] = "basicDay";
            } else if (options.calendarTypes[i] === "week") {
                options.calendarTypes[i] = "basicWeek";
            }
        }

        if (options.calendarTypes.length > 1) {
            calendarTypes = options.calendarTypes.join();
        }

        $(selector).fullCalendar({
            //timeFormat: options.localization.timeFormat,
            //columnFormat: options.localization.columnFormat,
            //titleFormat: options.localization.titleFormat,
            buttonText: options.localization.buttonText,
            monthNames: options.localization.monthNames,
            monthNamesShort: options.localization.monthNamesShort,
            dayNames: options.localization.dayNames,
            dayNamesShort: options.localization.dayNamesShort,

            header: {
                left: prevNext,
                center: title,
                right: calendarTypes
            },
            events: events,
            defaultView: options.calendarTypes[0],
            renderEvent: false,
            eventRender: function (event, element) {
                if ((options.compactView) && (options.dataType === "json")) {
                    $(element).css("display", "none");
                } else {
                    if (options.dataType === "json") {
                        inst.attachTooltip(event, element, false);
                    }
                }

                element.addClass(event.eventClass);
            },
            eventAfterAllRender: function () {
                if ((options.compactView) && (options.dataType === "json")) {
                    inst.renderCompactCalendarEvents(selector, events);
                }
            }
        });
    }

    InitCalendar.prototype.attachTooltip = function (event, element, compactCalendar) {
        var inst = this,
            $tooltip,
            tooltipContent,
            top = 0;

        $(element).on("mouseenter", function (ev) {
            tooltipContent = "";
            $(".calendar-tooltip").fadeOut();
            $(".calendar-tooltip").remove();

            if (compactCalendar) {
                tooltipContent = "";
                $.each(event, function () {
                    tooltipContent += "<div class='compact-event'>" +
                    "<span class='title'>" + this.title + "</span>" +
                    "<span class='description'>" + this.eventDescription + "</span>" +
                    "<span class='link'><a href='" + this.eventLink + "'>Link</a></span></div>";
                });
            } else {
                tooltipContent = "<span class='description'>" + event.eventDescription + "</span>" +
                "<span class='link'>" + event.eventLink + "</span>";
            }
            $tooltip = $("<div class='calendar-tooltip'><div class='arrow'>" +
            "</div><div class='events'>" + tooltipContent + "</div></div>");
            $("body").append($tooltip);


            $tooltip.css({
                "left": $(this).offset().left + $(this).width() / 2 - 80
            });
            $tooltip.css({
                "top": $(this).offset().top + $(this).height() / 2 + 5
            });

            var timeout;
            $(this).unbind("mouseleave");
            $(this).on("mouseleave", function () {
                timeout = setTimeout(function () {
                    $tooltip.fadeOut(function () {
                        $(this).remove();
                    });
                }, 300);

                $tooltip.unbind("mouseenter");
                $tooltip.on("mouseenter", function () {
                    clearTimeout(timeout);
                });
            });


            $tooltip.unbind("mouseleave");
            $tooltip.on("mouseleave", function () {
                $(this).fadeOut(function () {
                    $(this).remove();
                });

            });

        });
    };

    //attach events for single days - compact calendar*/
    InitCalendar.prototype.renderCompactCalendarEvents = function (selector, events) {
        var inst = this,
            currentDay,
            currentDate,
            currentEvent,
            dc, mc, yc,
            d, m, y, de, me, ye, he,
            startDate,
            endDate,
            dayEvents = [];

        $(selector).find(".fc-day").each(function () {
            currentDay = this;

            currentDate = new Date($(this).data("date"));
            dc = currentDate.getDate();
            mc = currentDate.getMonth();
            yc = currentDate.getFullYear();

            dayEvents = [];
            $.each(events, function () {
                currentEvent = this;
                startDate = toGMT(new Date(this.start));
                d = startDate.getDate();
                m = startDate.getMonth();
                y = startDate.getFullYear();

                if (this.end) {
                    endDate = toGMT(new Date(this.end));
                    de = endDate.getDate();
                    me = endDate.getMonth();
                    ye = endDate.getFullYear();
                    he = endDate.getHours();
                }

                if ((yc >= y) && (yc <= ye) && (mc >= m) && (mc <= me) && (dc >= d) && (dc <= de)) {
                    if ((yc == ye) && (mc == me) && (dc == de) && (he < 9)) {
                        // If last day do nothing but hour < 9
                    } else {
                        $(currentDay).addClass("selected-day");
                        dayEvents.push(currentEvent);
                    }
                }
            });

            if (dayEvents.length) {
                inst.attachTooltip(dayEvents, currentDay, true);
            }
        });

    };


    function resizeCalendar(selector) {
        $(selector).fullCalendar("render");
    }


    var pub = {};

    pub.init = function () {
        $(".event-calendar:not(.initialized)").each(function () {
            var properties = $(this).data("properties"),
                selector = "#" + $(this).find(".event-calendar-inner").attr("id");

            if ((properties.compactView) && (properties.dataType === "json")) {
                $(this).addClass("compact-mode");
            }

            new GetEvents(selector, properties);

            $(window).resize(function () {
                resizeCalendar(selector);
            });

            $(this).addClass("initialized");
        });
    };

    return pub;

})(jQuery, document);

XA.register("calendar", XA.component.calendar);
XA.component.galleria = (function ($, document) {

    var api = {};

    function checkPageEditor() {
        if ($("body").hasClass("on-page-editor")) {
            return true;
        }

        return false;
    }

    function initGalleria(component, prop) {
        var id = component.find(".gallery-inner").attr("id");
        Galleria.loadTheme(prop.theme);
        Galleria.configure({
            transition: 'fade',
            imageCrop: true
        });
        Galleria.run("#" + id, prop);
    }

    api.init = function () {
        if (!checkPageEditor()) {
            var gallery = $(".gallery:not(.initialized)");

            gallery.each(function () {
                var properties = $(this).data("properties");
                initGalleria($(this), properties);

                $(this).addClass("initialized");
            });
        }
    };

    return api;
}(jQuery, document));

XA.register("galleria", XA.component.galleria);
XA.component.languageSelector = (function ($, document) {

    var api = {};

    function readDataAttributes(item) {
        var lang = item.data("language-code"),
            country = item.data("country-code");

        return "flags-" + country;
    }

    function initLanguageSelector(instance) {
        var el = $(instance),
            header = el.find(".language-selector-select-item"),
            dropDownList = el.find(".language-selector-item-container"),
            dropDownItem = dropDownList.find(".language-selector-item");

        var className = readDataAttributes(header);
        header.find(">a").addClass(className);

        dropDownList.find(".language-selector-item").each(function () {
            className = readDataAttributes($(this));
            $(this).find(">a").addClass(className);
        });

        header.on("click", function () {
            dropDownList.slideToggle();
        });

        dropDownItem.on("click", function () {
            var url = $(this).find("a").attr("href");

            window.location.href = url;
        });
    }


    api.init = function () {
        var languageSelector = $(".language-selector:not(.initialized)");

        languageSelector.each(function () {
            initLanguageSelector(this);
            $(this).addClass("initialized");
        });
    };

    return api;
}(jQuery, document));

XA.register("language-selector", XA.component.languageSelector);
XA.component.links = (function($, document) {

    var pub = {},
        hiddenId;

    function getHiddenId(){
        hiddenId = $(".hidden-id .field-id").html();
    }

    function changeLink() {
        var links = $(".standard-enquiry-link, .prominent-enquiry-link, .important-enquiry-link"),
            linkHref;

        _.each(links, function(link){
            linkHref = $(link).attr("href");
            linkHref = linkHref.replace("$itemid$", hiddenId);
            $(link).attr("href", linkHref);
        });
    }

    pub.init = function() {
        getHiddenId();
        changeLink();
    };

    return pub;

})(jQuery, document);

XA.register("links", XA.component.links);
XA.component.livefyre = (function ($, document) {

    var api = {};

    function initLivefyre(prop) {
        var articleId = fyre.conv.load.makeArticleId(null);
        fyre.conv.load({}, [{
            el: 'livefyre-comments',
            network: "livefyre.com",
            siteId: prop.siteId,
            articleId: articleId,
            signed: false,
            collectionMeta: {
                articleId: articleId,
                url: fyre.conv.load.makeCollectionUrl(),
            }
        }], function () {});
    }

    function loadScript(http, https) {
        if (window.fyre === undefined) {
            var protocol = window.location.protocol;

            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.src = (protocol === "https:") ? https : http;
            document.getElementsByTagName('head')[0].appendChild(script);
        }
    }

    api.init = function () {
        var livefyre = $(".livefyre-comments:not(.initialized)");

        livefyre.each(function () {
            var properties = $(this).data("properties");

            if (properties.siteId) {
                loadScript('http://zor.livefyre.com/wjs/v3.0/javascripts/livefyre.js', 'https://cdn.livefyre.com/libs/fyre.conv.load.js');

                setTimeout(function() {
                    initLivefyre(properties);
                }, 1000);

                $(this).addClass("initialized");
            }
        });
    };

    return api;
}(jQuery, document));

XA.register("livefyre", XA.component.livefyre);

XA.component.navigation = (function ($, document) {

    var timeout = 200,
        timer = 0,
        submenu,
        dropDownEvents = {
            show: function (sm) {
                this.debounce();
                if (submenu) {
                    submenu.parent().removeClass("show");
                }
                submenu = sm;
                submenu.parent().addClass("show");
            },
            debounce: function () {
                if (timer) {
                    clearTimeout(timer);
                    timer = null;
                }
            },
            hide: function () {
                if (submenu) {
                    submenu.parent().removeClass("show")
                }
            },
            queueHide: function () {
                timer = setTimeout(function() {
                    dropDownEvents.hide();
                }, timeout);
            },
            focus: function () {
                $(this).parent().siblings().removeClass("show");
                $(this).parent().addClass("show");
            },
            blur: function () {
                if ($(this).parent().is(".last")) {
                    $(this).parents(".rel-level1").removeClass("show");
                }
            }

        };

    function dropDownNavigation(navi) {
        navi.on("mouseover", ".rel-level1 > a", function () {
            $(this).parent().removeClass("show");
            $(this).parent().siblings().removeClass("show");
            var elem = $(this).siblings("ul");
            dropDownEvents.show(elem);
        });
        navi.on("mouseleave", ".rel-level1 > a", dropDownEvents.queueHide);
        navi.on("mouseover", ".rel-level1 > ul", dropDownEvents.debounce);
        navi.on("mouseleave", ".rel-level1 > ul", dropDownEvents.queueHide);
        navi.on("focus", ".rel-level1 > a", dropDownEvents.focus);
        navi.on("blur", ".rel-level2 > a", dropDownEvents.blur);

        navi.find(".rel-level1").each(function () {
            if ($(this).find("ul").length) {
                $(this).addClass("submenu");
            }
        });

        navi.find(".rel-level2").each(function () {
            //if level2 menu have children

            if ($(this).parents('#header').length > 0) {
                if ($(this).find("ul").length) {
                    $(this).addClass("submenu");
                    $(this).parents('.rel-level1').addClass('wide-nav');
                }
            }

            //if level2 menu should be navigation-image variant
            if ($(this).find('> img').length) {
                $(this).addClass("submenu navigation-image");
            }
        });
    }

    function mobileNavigation(navi) {

        function checkChildren(nav) {
            nav.find(".rel-level1").each(function () {
                if (!$(this).find("ul").length) {
                    $(this).addClass("no-child");
                }
            });
        }

        function bindEvents(nav) {
            nav.find(".rel-level1").on("click", function (e) {
                var navlvl = $(this),
                    menuParent = navlvl.parents('.navigation');

                if (menuParent.hasClass('navigation-mobile')) {
                    if (!$(e.target).is("a")) {
                        if (navlvl.hasClass("active")) {
                            navlvl.find("ul").slideToggle(function () {
                                navlvl.removeClass("active");
                            });
                        } else {
                            navlvl.find("ul").slideToggle(function () {
                                navlvl.addClass("active");
                            });
                        }
                    }
                }
            });

            nav.find(".rel-level1 > a").on("focus", function () {
                $(this).siblings("ul").slideDown();
                $(this).parent().siblings().find("ul").slideUp();
            });
        }

        checkChildren(navi);
        bindEvents(navi);
    }

    function toggleIcon(toggle){
        $(toggle).closest('.grid-7').find('.navigation').toggleClass("active");
        $(toggle).toggleClass("active");
    }

    function headerMenuFix(nav) {
        var header = $('#header'),
            headerWidth = header.find('.container.boxed .component-content').width(),
            navPadding = parseInt(nav.parent().css('margin-left'), 10),
            headerLogo = header.find('.image').parent().width(),
            wideMenu = nav.find('.wide-nav > ul'),
            menuPosition = headerLogo + navPadding;


        if ($(window).width() >= '767') {
            if (nav.parents('#header').length > 0) {
                wideMenu.css({
                    'width': headerWidth,
                    'left': -menuPosition
                });
            }
        } else {
            wideMenu.css({
                'width': 'auto',
                'left': 0
            });
        }

    }


    var api = {};

    api.init = function() {
        var navigation = $(".navigation:not(.initialized)");

        navigation.each(function() {
            if ($(this).hasClass("navigation-main")) {
                dropDownNavigation($(this));
                mobileNavigation($(this));
            } else if ($(this).hasClass("navigation-mobile")) {
                mobileNavigation($(this));
            }

            if ($(this).parents("#header")) {
                var self = $(this);
                window.addEventListener('load', function() {
                    headerMenuFix(self);
                });

                window.addEventListener('resize', function() {
                    headerMenuFix(self);
                });
            }

            $(this).addClass("initialized");
        });

        var toggle = $(".mobile-nav:not(.initialized)");
        toggle.each(function(key, item){
            var $menu = $(item);

            $menu.on("click", function(e) {
                e.stopPropagation();
                toggleIcon($menu);
            });

            $('body').on('click', function() {
                if($menu.hasClass('active')) {
                    toggleIcon($menu);
                }
            });

            $(this).addClass("initialized");
        });
    };

    return api;
}(jQuery, document));

XA.register("navigation", XA.component.navigation);
XA.component.overlay = function ($) {

    var api = {},
        href = window.location.href,
        host = location.host,
        label,
        overlayPlaceholder = false,
        marginTop = 100;

    function isPreviewMode()
    {
        if (href.indexOf("sc_mode=preview") > -1)
            return true;

        var $hdPageMode = $('#hdPageMode');

        return $hdPageMode.length > 0 && $hdPageMode.attr('value') == 'preview';
    }

    function isEditMode() {
        if (href.indexOf("sc_mode=edit") > -1)
            return true;

        var $hdPageMode = $('#hdPageMode');

        return $hdPageMode.length > 0 && $hdPageMode.attr('value') == 'edit';
    }

    function isOverlayPage() {
        return $('#wrapper').hasClass('overlay-page');
    }

    function resizeOverlay(inner, content, options) {
        var unit = "px";
        var css = {
            "width" : "",
            "height" : ""
        };
        var wh = $(window).height();

        if (options.percent) {
            unit = "%";
            inner.addClass("overlay-percent");
            if(isEditMode()){
                inner.addClass("edit")
            }
        } else {
            inner.removeClass("overlay-percent");
            if(isEditMode()){
                inner.removeClass("edit")
            }
        }

        if (options.width) {
            css["width"] = options.width + unit;
        }
        if (options.height) {
            css["height"] = options.height + unit;
        }

        css["max-height"] = (wh - marginTop - 0.1 * wh) + "px";
        
        content.css(css);
    }

    function getUrlVariables(url) {
        var q = url.split('?')[1],
            vars = [],
            hash;

        if (q != undefined) {
            q = q.split('&');
            for (var i = 0; i < q.length; i++) {
                hash = q[i].split('=');
                vars.push(hash[1]);
                vars[hash[0]] = hash[1];
            }
        }

        return vars;
    }

    function getSize(vars){
        var obj = {};

        if(vars["width"] !== null) {
            obj["width"] = vars["width"];
        }

        if(vars["height"] !== null) {
            obj["height"] = vars["height"];
        }

        return obj;
    }

    function checkInternal(url){
        if(url.indexOf(host) > -1){
            return true;
        }
        return false;
    }

    function  checkImage(url){
        var ext = url.split("?")[0].split('.').pop();
        if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg']) > -1) {
            return true;
        }

        return false;
    }


    function loadOverlay(url, overlay) {
        var host = location.host,
            content = overlay.find(".overlay-inner"),
            overlayContent = overlay.find(".component-content"),
            vars = getUrlVariables(url),
            internalLink = checkInternal(url),
            overlaySize = getSize(vars),
            suffix;

        content.removeAttr('style');

        if(internalLink){
            if (checkImage(url)) {
                content.empty().append($("<img>", { src: url }));
                content.css(overlaySize);
                showOverlay(overlay);
            }
            else if (url.indexOf("overlaytype=iframe") > -1) {
                content.empty().append($("<iframe>", { src: url, style: "width: 100%; height: 100%" }));
                content.css(overlaySize);
                showOverlay(overlay);
            }
            else {
                suffix = "sc_device=overlay";
                url += (url.indexOf("?") == -1 ? "?" : "&") + suffix;

                if (isPreviewMode()) {
                    suffix = "cf_overlay=1";
                    url = url.replace("sitecore/shell/");
                    url += (url.indexOf("?") == -1 ? "?" : "&") + suffix
                }

                $.get(url, function(data) {
                    var overlayData = $(data).before().first();

                    resizeOverlay(content, overlayContent, {
                        width: overlayData.attr("data-width"),
                        height: overlayData.data("height"),
                        percent: overlayData.data("percent")
                    });

                    content.empty().append(data);
                    XA.init();
                    showOverlay(overlay);
                });
            }
        }
        else {
            if(checkImage(url)) {
                content.empty().append($("<img>", { src: url }));
            }
            else {
                content.empty().append($("<iframe >", { src: url, style: "width: 100%; height: 100%" }));
            }
            content.css(overlaySize);
            showOverlay(overlay);
        }

    };

    function preShowOverlay(overlay, overlayContent) {
        overlay.css({
            "opacity": 1
        }).show();
    }

    function showOverlay(overlay) {
        var i,q,links,close,content;
        overlay.show().animate({
            opacity: 1
        });

        close = overlay.find(".overlay-close-link");
        setTimeout(function(){close.focus();},0);
        links = overlay.find("a:not(.overlay-close-link)");
        i = 2;
        for(q=0;q<links.length;q++){
            $(links[q]).attr("tabIndex",i++);
        }
        content = overlay.find(".overlay-inner");
        content.attr("tabIndex",i);
        content.blur(function(args){
            args.preventDefault();
            args.stopPropagation();
            setTimeout(function(){close.focus()},0);
        });

        Cognifide.Tracking.track(
            Cognifide.Domain.TrackingTypes().event,
            {
                category: "Overlay",
                event: "open",
                label: label,
                data: 0
            },
            "sync"
        );
        return overlay;
    };

    function hideOverlay(overlay) {
        var content = overlay.find(".overlay-inner");

        overlay.animate(
            { opacity: 0 },
            function () {
                overlay.hide();
                content.empty();

                if (mejs) {
                    for (var p in mejs.players) {
                        if ($("#" + mejs.players[p].id).parents(".overlay").length == 1) {
                            $("#" + mejs.players[p].id + ' video').attr('src', '');
                            mejs.players[p].remove();
                            mejs.players.splice(p, 1);
                        }
                    }
                }
            }
        );

        Cognifide.Tracking.track(
            Cognifide.Domain.TrackingTypes().event,
            {
                category: "Overlay",
                event: "close",
                label: label,
                data: 0
            },
            "sync"
        );
        return overlay;
    };

    function createOverlay() {
        var overlay = "<div class='overlay-wrapper'>" +
                        "<div class='overlay component'>" +
                            "<div class='component-content'>" +
                                "<div class='overlay-close'><a tabIndex='1' class='overlay-close-link' href='#'>×</a></div>" +
                                "<div class='overlay-inner' tabIndex='2'></div>" +
                            "</div>" +
                         "</div>"+
                        "</div>";

        $("body").append(overlay);
    }

    api.init = function () {
        if(!overlayPlaceholder){
            createOverlay();
        }

        if (isOverlayPage()) {
            var page = $(".overlay-page"),
                overlay = $("#spnOverlay"),
                overlayContent = page.children(".component-content"),
                content = overlayContent.children(".overlay-inner");
            
            resizeOverlay(content, overlayContent, {
                width: overlay.data("width"),
                height: overlay.data("height"),
                percent: overlay.data("percent")
            });
            overlayContent.on("click", function(event){
                 event.stopPropagation();
            });
            page.on("click", function (event) {
                if (isPreviewMode()) {
                    location = location.href.replace("sc_mode=preview","sc_mode=edit")
                }             
            });     
        }

        var overlay = $(".overlay-wrapper > .overlay"),
            overlayContent = overlay.find(".component-content"),
            overlayClose = overlay.find(".overlay-close"),
            overlaySource = $(".overlay-source a:not(.initialized), a.overlay-source:not(.initialized)"),
            overlayInner = $(".overlay-inner"),
            overlayCloseLink = overlay.find(".overlay-close-link"),
            closeAction,
            overlayClickSource;

        closeAction = function(){
            hideOverlay(overlay);
            overlayInner.off("blur");
            setTimeout(function(){
                if(overlayClickSource != null){
                    overlayClickSource.focus();
                }
            },0);
        };

        if(!overlayPlaceholder){
            overlayContent.on("click", function(event){
                event.stopPropagation();
            });

            overlay.on("click", function (event) {
                closeAction();
            });
            
            $("body").keyup(function(args){
                args.stopPropagation();
                if(args.which == 27){
                    closeAction();
                }
            });

            overlayCloseLink.on("click", function(args){
                args.preventDefault();
                closeAction();
            });

            window.addEventListener("resize", function(){
                var height = $(window).height();
                height = height - marginTop - 0.1 * height;
                overlayContent.css("max-height", height + "px");
            });

            overlayPlaceholder = true;
        }


        overlaySource.each(function(){
            if (isEditMode()) {
                return;
            }

            $(this).on("click", function (event) {
                overlayClickSource = event.currentTarget;
                if (!isEditMode()) {
                    event.preventDefault();
                    preShowOverlay(overlay, overlayContent);

                    var uri = this.href;
                    loadOverlay(uri, overlay);

                    var href = this.href.split('/');
                    for (var i = 0; i <= href.length; i++) {
                        label = href.pop();
                        if (label.length == 0)
                            continue;
                        break;
                    }
                }
            });

            $(this).focus(function(args){
                args.preventDefault();
                if(args.currentTarget === overlayClickSource){
                    overlayClickSource = null;
                }
            });

            $(this).addClass("initialized");
        });


    };

    return api;

} (jQuery);

XA.register("overlay", XA.component.overlay);


    

XA.component.pageList = (function ($, document) {
    var api = {};

    api.init = function () {

        //make carousel from page-list component

        $('.page-list-carousel').each(function () {
            var $pageList = $(this),
                $items = $pageList.find('.item'),
                $first = $items.first().addClass('first'),
                $last = $items.last().addClass('last'),
                $current = $first.addClass('active');

            setInterval(function () {
                $current.removeClass('active');
                $current = $current.hasClass('last') ? $first : $current.next();
                $current.addClass('active');
            }, 2000);

            $pageList.addClass('initialized');
        });



        //make carousel from summary component

        $('.summary-carousel').each(function () {
            var $pageList = $(this),
                $items = $pageList.find('.slide'),
                current,
                last,
                slides = [];

            current = $items.first().addClass('active');
            last = $items.last().addClass('last');


            _.each($items, function (item) {
                slides.push(item)
            });

            setInterval(function () {
                $.each(slides, function (key, slide) {
                    var first = $(slide).parent().children('.slide:first');
                    if ($(slide).hasClass('active')) {
                        $(slide).removeClass('active');
                        current = $(slide).hasClass('last') ? first : $(slide).next();
                    }
                });

                current.addClass('active');
            }, 2000);

            $pageList.addClass('initialized');
        });
    };

    return api;
}(jQuery, document));

XA.register("pageList", XA.component.pageList);

XA.component.promo = (function ($, document) {
    var api = {};

    function makeHeroBackground(item) {
        var backgroundIcon = $(item).find('.field-promoicon'),
            background = $(item).find('img'),
            backgroundSrc = background.attr('src'),
            imageHeight = background.attr('height');


        if (backgroundSrc) {

            backgroundIcon.css({
                'width': "100%",
                'height': imageHeight,
                'background': 'url(' + backgroundSrc + ')',
                'background-size': 'cover',
                'background-repeat': 'no-repeat',
                'background-position': '50% 50%'
            });

            background.hide();
        }
    }

    api.init = function () {
        var promoHero = $('.promo-hero:not(.initialized)');

        _.each(promoHero, function (item) {
            makeHeroBackground(item);

            $(this).addClass('initialized');
        });

    };

    return api;
}(jQuery, document));

XA.register("promo", XA.component.promo);

(function($) {
    $.fn.scrollList = function(properties) {

        function ScrollList(elem) {
            this.properties = {
                "elem": elem,
                "visibleItems": 2,
                "autoplay": false,
                "autoplayDelay": 3000,
                "transitionTime": 1000,
                "horizontal": true,
                "circular": false,
                "height": 300,
                "step": 1,
                "mobile": [],
                onSlideChanged: function() {

                }
            }
        }

        ScrollList.prototype.getProperties = function(properties) {
            if (!properties.hasOwnProperty("height")) {
                properties.height = $(this.properties.elem).height();
            }

            if (properties.autoplayDelay < properties.transitionTime) {
                properties.transitionTime = properties.autoplayDelay;
            }

            $.extend(this.properties, properties);
            //add property to remember default visible items number
            this.properties.visibleItemsDefault = this.properties.visibleItems;
        }

        ScrollList.prototype.createNavigation = function(wrapper) {
            wrapper.after("<div class='nav'>" +
            "<div class='prev'><a href='#'>prev</a></div>" +
            "<div class='next'><a href='#'>next</a></div>" +
            "</div>");
        }

        ScrollList.prototype.autoplay = function() {
            var inst = this,
                scrollList = $(this.properties.elem);

            if ((inst.properties.autoplay) && (inst.properties.circular)) {
                var delayTime = this.properties.autoplayDelay,
                    interval = function() {
                        scrollList.find(".nav .next").trigger("click");
                    };

                inst.properties.intervalId = setInterval(interval, delayTime);
                scrollList.hover(
                    function() {
                        clearInterval(inst.properties.intervalId);
                    },
                    function() {
                        inst.properties.intervalId = setInterval(interval, delayTime);
                    }
                );

                $(window).resize(function() {
                    clearInterval(inst.properties.intervalId);
                    inst.properties.intervalId = setInterval(interval, delayTime);
                });
            }
        }


        ScrollList.prototype.replaceMobileProperties = function() {
            var inst = this,
                componentWidth = $(inst.properties.elem).width(),
                visibleItemsChanged = false;


            if (inst.properties.hasOwnProperty("mobile")) {
                $.each(inst.properties.mobile, function(i, item) {
                    if ((componentWidth > item.minWidth) && (componentWidth < item.maxWidth)) {
                        inst.properties.visibleItems = item.visibleItems;
                        visibleItemsChanged = true;
                        return false;
                    }
                });

                if (!visibleItemsChanged) {
                    inst.properties.visibleItems = inst.properties.visibleItemsDefault;
                }
            }
        }

        ScrollList.prototype.animate = function() {

        }

        ScrollList.prototype.horizontalEvents = function(wrapper, scrollItems, scrollSize) {
            var inst = this,
                left = 0,
                itemsLength = scrollItems.children("li").length,
                transitionTime = inst.properties.transitionTime;

            scrollItems.css({
                left: 0
            });
            if (!inst.properties.circular) {
                wrapper.next().find(".prev").addClass("hide");
            }

            wrapper.unbind("touchstart");
            wrapper.on("touchstart", function(e) {
                e.preventDefault();
                clearInterval(inst.properties.intervalId);
                var posX = e.originalEvent.changedTouches[0].pageX;

                $(this).unbind("touchend");
                $(this).on("touchend", function(ev) {
                    ev.preventDefault();
                    var posXEnd = ev.originalEvent.changedTouches[0].pageX;
                    if ((posX - posXEnd) > 100) {
                        wrapper.next().find(".next").trigger("click");
                    } else if ((posX - posXEnd) < -100) {
                        wrapper.next().find(".prev").trigger("click");
                    }
                });
            });

            wrapper.next().find(".next a,.prev a").on("click", function(e) {
                e.preventDefault();
            });

            wrapper.next().find(".next").unbind("click");
            wrapper.next().find(".next").on("click", function() {
                var scrollPosition1 = left,
                    scrollPosition2 = -itemsLength * scrollSize / inst.properties.step + inst.properties.visibleItems * scrollSize / inst.properties.step;

                if (Math.round(scrollPosition1) > Math.round(scrollPosition2)) {
                    left = left - scrollSize;

                    scrollItems.stop().animate({
                        left: left
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });

                    if (left <= scrollPosition2) {
                        $(this).addClass("hide");
                    }

                    $(this).parent().find(".prev").removeClass("hide");
                } else if (inst.properties.circular) {
                    var itemToRemove = scrollItems.children("li").first();
                    scrollItems.children("li").first().remove();
                    scrollItems.append(itemToRemove);

                    scrollItems.css({
                        left: left + scrollSize
                    });
                    scrollItems.stop().animate({
                        left: left
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });
                }

            });

            wrapper.next().find(".prev").unbind("click");
            wrapper.next().find(".prev").on("click", function() {
                if (Math.round(left + scrollSize) <= 0) {
                    left = left + scrollSize;

                    scrollItems.stop().animate({
                        left: left
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });

                    if (Math.round(left) === 0) {
                        $(this).addClass("hide");
                    }

                    $(this).parent().find(".next").removeClass("hide");
                } else if (inst.properties.circular) {
                    var itemToRemove = scrollItems.children("li").last();
                    scrollItems.children("li").last().remove();
                    scrollItems.prepend(itemToRemove);

                    scrollItems.css({
                        left: -scrollSize
                    });
                    scrollItems.stop().animate({
                        left: left
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });
                }

            });
        }

        ScrollList.prototype.generateHorizontalScroll = function(prop) {
            var inst = this,
                scrollSize,
                scrollWrapper = $(inst.properties.elem).find(".scroll-wrapper"),
                scrollItems = scrollWrapper.children("ul"),
                scrollItem = scrollItems.children("li"),
                wrapperWidth = scrollWrapper.width(),
                itemPaddingLeft = parseInt(scrollItem.css("padding-left")),
                itemPaddingRight = parseInt(scrollItem.css("padding-right")),
                itemMarginLeft = parseInt(scrollItem.css("margin-left")),
                itemMarginRight = parseInt(scrollItem.css("margin-right")),
                itemBorderWidth = parseInt(scrollItem.css("border-left-width")),
                itemWidth = (wrapperWidth - inst.properties.visibleItems * itemPaddingLeft -
                    inst.properties.visibleItems * itemPaddingRight) / inst.properties.visibleItems -
                    2 * itemBorderWidth - itemMarginRight - itemMarginLeft;


            window.addEventListener('load', function() {
                scrollWrapper.height(scrollItem.outerHeight());
            });

            window.addEventListener('resize', function() {
                scrollWrapper.height(scrollItem.outerHeight());
            });

            scrollItem.width(itemWidth);

            if (!prop.resize) {
                this.createNavigation(scrollWrapper);
            }

            scrollSize = itemWidth + itemPaddingLeft + itemPaddingRight + itemBorderWidth * 2 + itemMarginRight + itemMarginLeft;
            scrollSize = scrollSize * inst.properties.step;

            this.horizontalEvents(scrollWrapper, scrollItems, scrollSize);
        }




        ScrollList.prototype.generateVerticalScroll = function(prop) {
            var inst = this,
                scrollWrapper = $(inst.properties.elem).find(".scroll-wrapper"),
                scrollSize,
                scrollItems = scrollWrapper.children("ul"),
                scrollItem = scrollItems.children("li"),
                itemPaddingTop = parseInt(scrollItem.css("padding-top")),
                itemPaddingBottom = parseInt(scrollItem.css("padding-bottom")),
                itemMarginTop = parseInt(scrollItem.css("margin-top")),
                itemMarginBottom = parseInt(scrollItem.css("margin-bottom")),
                itemBorderHeight = parseInt(scrollItem.css("border-top-width")),
                listPadding = 80,
                itemHeight = (this.properties.height - inst.properties.visibleItems * itemPaddingTop -
                    inst.properties.visibleItems * itemPaddingBottom) / inst.properties.visibleItems -
                    itemBorderHeight * 2 - itemMarginTop - itemMarginBottom;


            window.addEventListener('load', function() {
                scrollWrapper.height(scrollItem.outerHeight() + listPadding);
                scrollItem.height(scrollItem.outerHeight() / inst.properties.visibleItems);
            });

            window.addEventListener('resize', function() {
                scrollWrapper.height(scrollItem.outerHeight() + listPadding);
                scrollItem.height(scrollItem.outerHeight() / inst.properties.visibleItems);
            });

            if (!prop.resize) {
                this.createNavigation(scrollWrapper);
            }

             //itemHeight + itemPaddingTop + itemPaddingBottom + 2 * itemBorderHeight + itemMarginTop + itemMarginBottom;
            //scrollSize = scrollSize * inst.properties.step;

            window.addEventListener('load', function() {
                scrollSize = (scrollItem.outerHeight() / inst.properties.visibleItems) * inst.properties.step;
                inst.verticalEvents(scrollWrapper, scrollItems, scrollSize);
            });
        }


        ScrollList.prototype.verticalEvents = function(wrapper, scrollItems, scrollSize) {
            var inst = this,
                top = 0,
                itemsLength = scrollItems.children("li").length,
                transitionTime = inst.properties.transitionTime;

            scrollItems.css({
                top: 0
            });
            if (!inst.properties.circular) {
                wrapper.next().find(".prev").addClass("hide");
            }

            wrapper.next().find(".next a,.prev a").on("click", function(e) {
                e.preventDefault();
            });

            wrapper.unbind("touchstart");
            wrapper.on("touchstart", function(e) {
                e.preventDefault();
                clearInterval(inst.properties.intervalId);
                var posY = e.originalEvent.changedTouches[0].pageY;

                $(this).unbind("touchend");
                $(this).on("touchend", function(ev) {
                    ev.preventDefault();
                    var posYEnd = ev.originalEvent.changedTouches[0].pageY;
                    if ((posY - posYEnd) > 100) {
                        wrapper.next().find(".next").trigger("click");
                    } else if ((posY - posYEnd) < -100) {
                        wrapper.next().find(".prev").trigger("click");
                    }
                });
            });

            wrapper.next().find(".next").unbind("click");
            wrapper.next().find(".next").on("click", function() {
                var scrollPosition1 = top,
                    scrollPosition2 = scrollSize / inst.properties.step;// + inst.properties.visibleItems * scrollSize / inst.properties.step;

                if (Math.round(scrollPosition1) > Math.round(scrollPosition2)) {
                    top = top - scrollSize;

                    scrollItems.stop().animate({
                        top: top
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });

                    if (Math.round(top) <= Math.round(scrollPosition2)) {
                        $(this).addClass("hide");
                    }

                    $(this).parent().find(".prev").removeClass("hide");
                } else if (inst.properties.circular) {
                    var itemToRemove = scrollItems.children("li").first();

                    scrollItems.css({
                        top: top + scrollSize
                    });

                    scrollItems.stop().animate({
                        top: top
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });

                    scrollItems.children("li").first().remove();
                    scrollItems.append(itemToRemove);
                }
            });

            wrapper.next().find(".prev").unbind("click");
            wrapper.next().find(".prev").on("click", function() {

                if (Math.round(top + scrollSize) <= 0) {
                    top = top + scrollSize;

                    scrollItems.stop().animate({
                        top: top
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });
                    if (Math.round(top) === 0) {
                        $(this).addClass("hide");
                    }

                    $(this).parent().find(".next").removeClass("hide");
                } else if (inst.properties.circular) {
                    var itemToRemove = scrollItems.children("li").last();

                    scrollItems.css({
                        top: top - scrollSize
                    });

                    scrollItems.stop().animate({
                        top: top
                    }, transitionTime, function() {
                        inst.properties.onSlideChanged.call(inst);
                    });


                    scrollItems.children("li").last().remove();
                    scrollItems.prepend(itemToRemove);

                }
            });
        }


        var scrollList = new ScrollList(this);
        scrollList.getProperties(properties);
        scrollList.replaceMobileProperties();

        if (scrollList.properties.circular) {
            $(this).addClass("circular");
        }

        if (scrollList.properties.horizontal) {
            $(this).addClass("horizontal");
            scrollList.generateHorizontalScroll({
                resize: false
            });

            $(window).resize(function() {
                scrollList.replaceMobileProperties();
                scrollList.generateHorizontalScroll({
                    resize: true
                });
            });
        } else {
            $(this).addClass("vertical");
            scrollList.generateVerticalScroll({
                resize: false
            });

            $(window).resize(function() {
                scrollList.replaceMobileProperties();
                scrollList.generateVerticalScroll({
                    resize: true
                });
            });
        }

        scrollList.autoplay();


        return this;
    }
})(jQuery);


XA.component.scrollList = (function($, document) {
    var api = {};
    api.init = function() {
        var scrollList = $(".scroll-list");

        scrollList.each(function() {
            var properties = $(this).data("properties");
            $(this).scrollList(properties);
        });
    };

    return api;
}(jQuery, document));

XA.register("scrollList", XA.component.scrollList);
XA.component.social = (function($, document) {

    var api = {},
        attachExternalScript;

    api.initFacebook = function() {
        (function(d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) {
                return;
            }
            js = d.createElement(s);
            js.id = id;
            js.src = "//connect.facebook.net/en_US/all.js#xfbml=1";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
    }

    attachExternalScript = function(properties){
        var component = $(".sharethis"),
            shareThisExternal;
        if(window.stLight === undefined){
            shareThisExternal = document.createElement("script");
            shareThisExternal.type = "text/javascript";
            shareThisExternal.src = "http://w.sharethis.com/button/buttons.js";
            $(window).on("load",function(){
                $(properties).each(function(){
                    stLight.options(this);
                });
            });
            $(component[0]).append(shareThisExternal);
        } 
    };

    api.init = function() {
        var shareThis = $(".sharethis:not(.initialized)"),
            shareProperties = [];
        shareThis.each(function() {
            var properties = $(this).data("properties");
            shareProperties.push(properties);
            $(this).addClass("initialized");
        });
        attachExternalScript(shareProperties);       
    };

    return api;
}(jQuery, document));

XA.register("social", XA.component.social);
XA.component.social.initFacebook();
XA.component.tabs = (function($) {

    var pub = {};

    function pageEditor() {
        if ($('body').hasClass('on-page-editor')) {
            Sitecore.PageModes.ChromeManager.resetChromes(); //page editor lines fix
        }
    }

    function tabsScrollable($tabsScroll) {
        var speed = 150; //tabs scroll speed

        function initNavScroll($tabsNav) {
            var sum = 0,
                maxHeight = 0,
                maxWidth = 0;

            if ($tabsNav.length) {
                $tabsNav.parent().find(".prev").remove();
                $tabsNav.parent().find(".next").remove();
                $tabsNav.unwrap();

                $tabsNav.css("width", "auto");
                $tabsNav.css("height", "auto");
                $tabsNav.css("left", 0);
            }


            $tabsNav.find("li").each(function() {
                sum += $(this).outerWidth(true);
            });


            $tabsNav.find("li").each(function() {
                maxHeight = Math.max(maxHeight, $(this).height());
            });


            $tabsNav.wrap("<div class='wrapper'>");
            $("<div class='next tab-slider'>></div>").insertAfter($tabsNav);
            $("<div class='prev tab-slider'><</div>").insertBefore($tabsNav);


            $tabsNav.parent().css("height", parseInt(maxHeight, 10));
            $tabsNav.parent().find(".tab-slider").css("height", parseInt(maxHeight, 10) - 2);


            if (sum > $tabsNav.parent().width()) {
                $tabsNav.parent().find(".prev").hide();
                $tabsNav.width(sum);
            } else {
                $tabsNav.parent().find(".prev").hide();
                $tabsNav.parent().find(".next").hide();
            }
        }


        function bindPrevNextEvents(current, $tabsNav) {
            current.find(".prev").click(function() {
                var left = parseInt($tabsNav.css("left"), 10);
                left += speed;

                if (left > 0) {
                    left = 0;
                    $tabsNav.stop().animate({
                        "left": left
                    });

                    $tabsNav.parent().find(".prev").hide();
                    $tabsNav.parent().find(".next").show();
                } else {
                    $tabsNav.stop().animate({
                        "left": left
                    });

                    $tabsNav.parent().find(".prev").show();
                    $tabsNav.parent().find(".next").show();
                }
            });


            current.find(".next").click(function() {
                var left = parseInt($tabsNav.css("left"), 10),
                    navWidth = $tabsNav.width(),
                    navParentWidth = $tabsNav.parent().width();

                left -= speed;

                if ((navWidth + left) < navParentWidth) {
                    left = navWidth - navParentWidth;
                    $tabsNav.stop().animate({
                        "left": -left
                    });

                    $tabsNav.parent().find(".prev").show();
                    $tabsNav.parent().find(".next").hide();
                } else {
                    $tabsNav.stop().animate({
                        "left": left
                    });

                    $tabsNav.parent().find(".prev").show();
                    $tabsNav.parent().find(".next").show();
                }
            });
        }

        function bindChangeTabs($tabsNav, $tabsContainer) {
            $tabsNav.find("li").click(function() {
                var index = $(this).index();

                $(this).addClass("active");
                $(this).siblings().removeClass("active");

                $tabsContainer.find(".tab").removeClass("active");
                $tabsContainer.find(".tab:eq(" + index + ")").addClass("active");

                return false;
            });
        }

        function initTabsScrollable($tabs) {
            $tabs.each(function() {
                var $tabsNav = $(this).find(".tabs-heading"),
                    $tabsContainer = $(this).find(".tabs-container");

                $tabsNav.find("li:first-child").addClass("active");
                $tabsContainer.find(".tab:eq(0)").addClass("active");

                bindChangeTabs($tabsNav, $tabsContainer);
                initNavScroll($tabsNav);
                bindPrevNextEvents($(this), $tabsNav);
            });
        }


        initTabsScrollable($tabsScroll);
        $(window).resize(function() {
            initTabsScrollable($tabsScroll);
        });

    }

    pub.init = function() {
        var $tabs = $(".tabs:not(.initialized)");
        $tabs.each(function() {
            $tabModule = $(this).find(".tabs-inner");

            if ($(this).hasClass("tabs-scrollable")) {
                tabsScrollable($(this));
            } else {
                $tabModule.each(function() {
                    var $tabNav = $(this).find(".tabs-heading > li"),
                        $tabs = $(this).find("> .tabs-container > .tab");
                    $tabNav.first().addClass("active");
                    $tabs.first().addClass("active");
                    $tabNav.click(function(event) {
                        var index = $(this).index();
                        $(this).siblings().removeClass("active");
                        $(this).parent().parent().find("> .tabs-container > .tab").removeClass("active");
                        $(this).addClass("active");
                        $($(this).parent().parent().find("> .tabs-container > .tab").eq(index)).addClass("active");
                        pageEditor();
                        event.preventDefault();
                    });
                });
            }

            $(this).addClass("initialized");
        });
    }

    return pub;
}(jQuery));

XA.register("tabs", XA.component.tabs);
XA.component.toggle = (function ($, document) {

    var toogleEvents = {
            focus: function () {
                $(this).addClass("show");
            },
            blur: function () {                
                $(this).removeClass("show");
            }

        };

    function initEvents(header) {
        header.on("mouseover", toogleEvents.focus);
        header.on("mouseleave", toogleEvents.blur);
        header.on("focus", toogleEvents.focus);
        header.on("blur", toogleEvents.blur);
        header.on("keyup", function (e) {
            if (e.keyCode == 13) {
                $(this).click();
            }
        });
    };
    
    var api = {};

    api.init = function () {
        var toogleHeaders = $(".toggle-header:not(.initialized)");
        for (var i = 0; i < toogleHeaders.length; i++) {
            var header = $(toogleHeaders[i]);
            initEvents(header);
            header.addClass("initialized");
        };
    };

    return api;
}(jQuery, document));

XA.register("toggle", XA.component.toggle);
XA.component.playlist = (function ($, document) {

    var api = {};

    function Playlist(playlist, properties) {
        this.properties = properties;
        this.playlist = playlist;
        this.activeVideo = 0;
        this.playlistItems = 0;
    }

    Playlist.prototype.createNewSources = function (source, videoContainer) {
        var newSource;

        var sourceBuilder = function (path) {
            var newSource = $("<source>"),
                type;

            if (path.match(/\.(mp4)$/)) {
                type = "video/mp4";
            } else if (path.match(/\.(webm)$/)) {
                type = "video/webm";
            } else if (path.match(/\.(ogv)$/)) {
                type = "video/ogg";
            } else {
                type = "video/youtube";
            }

            newSource.attr({
                "type": type,
                "src": path
            });

            return newSource;
        };

        if (source instanceof Array) {
            for (var i = 0; i < source.length; i++) {
                newSource = sourceBuilder(source[i]);
                videoContainer.find("video").append(newSource);
            }
        } else {
            newSource = sourceBuilder(source);
            videoContainer.find("video").append(newSource);
        }
    };

    Playlist.prototype.replaceSource = function (itemIndex, loadFromEvent) {
        var inst = this,
            videoContainer,
            videoClone,
            newSrc = inst.properties.sources[itemIndex].src,
            sources,
            videoId,
            videoContainerHeight = 0;

        $(inst.properties.playlistId).each(function () {
            videoContainer = $(this);
            videoId = inst.properties.playlistId;

            if ((videoContainer.is(videoId) && (newSrc.length))) {
                videoContainer.addClass("show");

                /*mejs.players[id].pause();
                mejs.players[id].setSrc(newSrc);        
                mejs.players[id].media.load();
                mejs.players[id].play();*/
                /*above doesent work when chnaging beetween hosted and youtube videos*/

                sources = videoContainer.find("source");
                sources.remove();
                inst.createNewSources(newSrc, videoContainer);
                videoContainer.find("video").attr({
                    src: ""
                }).show();

                var autoplayVideo = false;
                if(loadFromEvent){
                    if(inst.properties.autoPlaySelected){
                        autoplayVideo = true;
                    }
                }
                else {
                    if (inst.properties.autoPlay) {
                        autoplayVideo = true;
                    }
                }

                if(autoplayVideo) {
                    videoContainer.find("video").attr({
                        autoplay: ""
                    });
                }
               
                videoClone = videoContainer.find("video").clone();
                videoContainerHeight = videoContainer.height();
                videoContainer.css({
                    "height": videoContainerHeight
                });

                var id = videoContainer.find(".mejs-container").attr("id");
                if (id) {
                    $("#" + id).remove();
                    delete mejs.players[id];
                    videoContainer.find(".component-content").append(videoClone);
                }

                var player = XA.component.video.initVideoFromPlaylist(videoContainer, inst.playlist);
                videoContainer.css({
                    "height": "auto"
                });
            }
        });
    };

    Playlist.prototype.loadPlaylistVideo = function() {
        var inst = this,
            playlistItems = $(inst.playlist).find(".playlist-item"),
            activeListItem;

        inst.playlistItems = playlistItems.length;
        var loadVideoFromPlaylist = function(loadFromEvent) {
            inst.replaceSource(inst.activeVideo, loadFromEvent);
            activeListItem = playlistItems.eq(inst.activeVideo);
            activeListItem.addClass("active");
            activeListItem.siblings().removeClass("active");
        }

        loadVideoFromPlaylist();
        $(inst.playlist).on("change-video", function(event, properties) {
            var loadNewVideo = false;

            if (properties) {
                if (properties.hasOwnProperty("back")) {
                    inst.activeVideo--;
                    if (inst.activeVideo < 0) {
                        inst.activeVideo = 0;
                    } else {
                        loadNewVideo = true;
                    }
                } else {
                    inst.activeVideo++;
                    if (inst.activeVideo === inst.playlistItems) {

                        if (inst.properties.repeatAfterAll) {
                            inst.activeVideo = 0;
                            loadNewVideo = true
                        } else {
                            inst.activeVideo = inst.playlistItems - 1;
                        }
                    } else {
                        loadNewVideo = true;
                    }
                }

            } else {
                if (inst.properties.playNext) {
                    if ((inst.activeVideo + 1) <= inst.playlistItems) {
                        inst.activeVideo++;

                        if (inst.activeVideo === inst.playlistItems) {
                            inst.activeVideo = 0;

                            if (inst.properties.repeatAfterAll) {
                                loadNewVideo = true;
                            }
                        } else {
                            inst.actiVideo--;
                            loadNewVideo = true;
                        }
                    }
                }
            }

            if (loadNewVideo) {
                loadVideoFromPlaylist(true);
            }
        });
    };

    Playlist.prototype.attachEvents = function() {
        var inst = this,
            link = $(inst.playlist).find(".playlist-section a"),
            navItems = $(inst.playlist).find(".playlist-nav a"),
            playlistItem;

        link.on("click", function(event) {
            event.preventDefault();

            playlistItem = $(this).parents(".playlist-item");
            itemIndex = playlistItem.index();

            if (itemIndex !== inst.activeVideo) {
                playlistItem.addClass("active");
                playlistItem.siblings().removeClass("active");
                inst.replaceSource(itemIndex, true);
                inst.activeVideo = itemIndex;
            }
        });

        navItems.on("click", function(event) {
            event.preventDefault();
            var properties = {};

            if ($(this).parent().hasClass("playlist-prev")) {
                properties.back = true;
            }

            $(inst.playlist).trigger("change-video", properties);
        });

    };


    api.init = function() {
        var playlists = $(".playlist.component:not(.initialized)"),
            properties,
            playlist;

        playlists.each(function() {
            properties = $(this).data("properties");

            $(properties.playlistId).addClass("initialized"); //prevent video init in component-video.js
            if (properties.sources.length) {
                playlist = new Playlist(this, properties);
                playlist.loadPlaylistVideo();
                playlist.attachEvents();
            }

            $(this).addClass("initialized");
        });
    };

    return api;
}(jQuery, document));

XA.register("playlist", XA.component.playlist);
XA.component.video = (function($, document) {

    var api = {};

    function checkSize(video) {
        var videoWidth = video.width();
        video.removeClass("video-small hide-controls");

        if ((videoWidth < 481) && (videoWidth >= 321)) {
            video.addClass("video-small");
        } else if (videoWidth < 321) {
            video.addClass("hide-controls");
        }
    }

    function checkIE11() {
        if (navigator.userAgent.match(/Trident\/7.0/)) {
            return true;
        }

        return false;
    }

    function initVideo(video, properties) {
        var content = video.find("video");

        if(!content.length){
            return;
        }

        if (!movieTracker) {
            movieTracker = XAContext.Tracking.Movies($);
        }


        var callback = function(mediaElement, domObject) {
            mediaElement.movieName = 'Movie';
            movieTracker.register({
                name: 'Movie',
                api: mediaElement,
                trackerId: 'mejs',
                completedTime: null
            });

            $(mediaElement).on("ended", function() {
                if (properties.fromPlaylist) {
                    $(properties.playlist).trigger("change-video");
                }
            });
        };

        $.extend(properties, {
            "plugins": ['flash', 'silverlight'],
            "mode" : "shim",
            "silverlightName": 'silverlightmediaelement.xap',
            "success": callback
        });

        if (checkIE11()) {
            properties = null;
        }

        content.attr({
            'width' : content.width(),
            'height' : content.height()
        });

        return new MediaElementPlayer(content, properties);
    }

    api.initVideoFromPlaylist = function(video, playlist) {
        var properties = $(video).data("properties");

        $.extend(properties, {
            "fromPlaylist": true,
            "playlist": playlist
        });

        return initVideo(video, properties);
    };


    api.init = function() {
        if(XA.component.hasOwnProperty("playlist")){
            XA.component.playlist.init();
        }

        var video = $(".video.component:not(.initialized)");

        video.each(function() {
            var properties = $(this).data("properties");

            initVideo($(this), properties);
            checkSize($(this));

            $(window).resize(function() {
                checkSize($(this));
            });

            $(this).addClass("initialized");
        });

        $(document).on('mozfullscreenchange', function() {
            setTimeout(function() {
                $(window).resize();
            }, 200); //mozilla bug fix
        });
    };

    return api;
}(jQuery, document));

XA.register("video", XA.component.video);
XA.component.equalHeight = (function($, config) {
    var settings = {
        parentSelector: '.equalized-content',
        selector: '.equal'
    };

    var api = {};

    function fixHeight() {

        $(settings.parentSelector).each(function() {
            var $elements = $(this).find(settings.selector),
                maxHeight = 0,
                maxPadding = 0,
                $link = null;

            $elements.each(function() {
                $(this).css('min-height', 'inherit');

                $link = $(this).find('.promo-link');
                if ($link.length === 0) {
                    $link = $(this).find('.summary-link');
                }

                if ($link.css('position') == 'absolute') {
                    if ($link.length && $link.height() > maxPadding) {
                        maxPadding = $link.height() + parseInt($link.css('padding-top'), 10) + parseInt($link.css('padding-bottom'), 10) + parseInt($link.css('margin-top'), 10);
                    }
                }

                if ($(this).height() > maxHeight) {
                    maxHeight = $(this).outerHeight(true);
                }

            });

            if (maxHeight > 0) {
                $elements.css({
                    'padding-bottom': maxPadding,
                    'min-height': maxHeight
                });
            }
        });
    }

    api.init = function() {
        $(window).bind('load', function() {
            setTimeout(fixHeight, 0);
        });

        $(window).bind('resize', function() {
            fixHeight();
        });
    };

    return api;

}(jQuery, document));

XA.register("equalHeight", XA.component.equalHeight);
XA.component.geospatialsearch = function($, document){
    var api = {};

    api.init = function(){
        var geospatial = $("body.geospatial-search"),
            map,
            target,
            header = $("#header"),
            h;
        if(geospatial.length !== 1){
            return;
        }

        map = geospatial.find(".component.map");
        geospatial.on("click",function(args){
            target = $(args.target);
            if(target.parents(".search-result-list").length !== 0){
                h = map.position().top - 30;
                geospatial.animate({scrollTop : h},333);
            }
        });
    };

    return api;
}(jQuery, document);
XA.register("geospatialsearch",XA.component.geospatialsearch);

XA.component.releasenotes = function($,document){
    var api = {};


    api.init = function(){
        api.bison();
    };

    api.bison = function(){
        var page = $(".release-notes-bison"),
            header = $("#header");
        // $(page.find("#content .row:nth-child(2)")).find(".component.image, .rich-text").addClass("active");

        var images = page.find("#content .component.image");
        images.on("click",function(args){
            var target = $(args.target),
                componentImage;
            page.find(".active").removeClass("active");
            componentImage = target.is(".component.image") ? target : target.parents(".component.image");
            componentImage.addClass("active");
            componentImage.siblings(".rich-text").addClass("active");
            page.find("#content .component.title").addClass("hidden");
            return false;
        });

        var parallax = page.find("#content .parallax-background");
        parallax.on("click",function(args){
            var target = $(args.target);
            if(target.parent().hasClass("parallax-background") ||
            (target.parents(".rich-text").length === 0 && target.parents(".component.image").length === 0 && !target.is(".rich-text") && !target.is(".component.image"))){
                page.find(".active").removeClass("active");
                page.find("#content .component.title").removeClass("hidden");
            }
        });

        $(window).on("scroll",function(args){
            if(window.scrollY >= 100){
                header.addClass("scrolled");
            }
            else {
                header.removeClass("scrolled");
            }
        });
    };

    return api;
}(jQuery, document);

XA.register("releasenotes",XA.component.releasenotes);

XA.component.utils = (function ($, document) {

    var api = {};

    function attachEvents(item) {
        var $item = $(item),
            $searchInput = $(item).parent().find('.search-box');

        $item.on('click', function() {
            $item.toggleClass('active');
            $searchInput.toggleClass('active');
        });

        $item.addClass("initialized");
    }

    api.init = function () {
        var headerSearchButton = $(".search-icon:not(.initialized)");

        if (headerSearchButton.length > 0) {
            attachEvents(headerSearchButton);
        }
    };

    return api;
}(jQuery, document));

XA.register("utils", XA.component.utils);

- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 171730
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20170328T231913Z
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: sitecore\Admin
